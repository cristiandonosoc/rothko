// This file is autogenerated. Do not modify it.

// Including animation.cc file.

//----------------------------------------------------------------------------//
//                                                                            //
// ozz-animation is hosted at http://github.com/guillaumeblanc/ozz-animation  //
// and distributed under the MIT License (MIT).                               //
//                                                                            //
// Copyright (c) 2019 Guillaume Blanc                                         //
//                                                                            //
// Permission is hereby granted, free of charge, to any person obtaining a    //
// copy of this software and associated documentation files (the "Software"), //
// to deal in the Software without restriction, including without limitation  //
// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //
// and/or sell copies of the Software, and to permit persons to whom the      //
// Software is furnished to do so, subject to the following conditions:       //
//                                                                            //
// The above copyright notice and this permission notice shall be included in //
// all copies or substantial portions of the Software.                        //
//                                                                            //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    //
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    //
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        //
// DEALINGS IN THE SOFTWARE.                                                  //
//                                                                            //
//----------------------------------------------------------------------------//

#include "ozz/animation/runtime/animation.h"

#include "ozz/base/io/archive.h"
#include "ozz/base/log.h"
#include "ozz/base/maths/math_archive.h"
#include "ozz/base/maths/math_ex.h"
#include "ozz/base/memory/allocator.h"

#include <cassert>
#include <cstring>

// Internal include file
#define OZZ_INCLUDE_PRIVATE_HEADER  // Allows to include private headers.

// Includes internal include file animation/runtime/animation_keyframe.h

//----------------------------------------------------------------------------//
//                                                                            //
// ozz-animation is hosted at http://github.com/guillaumeblanc/ozz-animation  //
// and distributed under the MIT License (MIT).                               //
//                                                                            //
// Copyright (c) 2019 Guillaume Blanc                                         //
//                                                                            //
// Permission is hereby granted, free of charge, to any person obtaining a    //
// copy of this software and associated documentation files (the "Software"), //
// to deal in the Software without restriction, including without limitation  //
// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //
// and/or sell copies of the Software, and to permit persons to whom the      //
// Software is furnished to do so, subject to the following conditions:       //
//                                                                            //
// The above copyright notice and this permission notice shall be included in //
// all copies or substantial portions of the Software.                        //
//                                                                            //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    //
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    //
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        //
// DEALINGS IN THE SOFTWARE.                                                  //
//                                                                            //
//----------------------------------------------------------------------------//

#ifndef OZZ_ANIMATION_RUNTIME_ANIMATION_KEYFRAME_H_
#define OZZ_ANIMATION_RUNTIME_ANIMATION_KEYFRAME_H_

#ifndef OZZ_INCLUDE_PRIVATE_HEADER
#error "This header is private, it cannot be included from public headers."
#endif  // OZZ_INCLUDE_PRIVATE_HEADER

namespace ozz {
namespace animation {

// Define animation key frame types (translation, rotation, scale). Every type
// as the same base made of the key time ratio and it's track index. This is
// required as key frames are not sorted per track, but sorted by ratio to favor
// cache coherency. Key frame values are compressed, according on their type.
// Decompression is efficient because it's done on SoA data and cached during
// sampling.

// Defines the translation key frame type.
// Translation values are stored as half precision floats with 16 bits per
// component.
struct TranslationKey {
  float ratio;
  uint16_t track;
  uint16_t value[3];
};

// Defines the rotation key frame type.
// Rotation value is a quaternion. Quaternion are normalized, which means each
// component is in range [0:1]. This property allows to quantize the 3
// components to 3 signed integer 16 bits values. The 4th component is restored
// at runtime, using the knowledge that |w| = sqrt(1 - (a^2 + b^2 + c^2)).
// The sign of this 4th component is stored using 1 bit taken from the track
// member.
//
// In more details, compression algorithm stores the 3 smallest components of
// the quaternion and restores the largest. The 3 smallest can be pre-multiplied
// by sqrt(2) to gain some precision indeed.
//
// Quantization could be reduced to 11-11-10 bits as often used for animation
// key frames, but in this case RotationKey structure would induce 16 bits of
// padding.
struct RotationKey {
  float ratio;
  uint16_t track : 13;   // The track this key frame belongs to.
  uint16_t largest : 2;  // The largest component of the quaternion.
  uint16_t sign : 1;     // The sign of the largest component. 1 for negative.
  int16_t value[3];      // The quantized value of the 3 smallest components.
};

// Defines the scale key frame type.
// Scale values are stored as half precision floats with 16 bits per
// component.
struct ScaleKey {
  float ratio;
  uint16_t track;
  uint16_t value[3];
};
}  // namespace animation
}  // namespace ozz
#endif  // OZZ_ANIMATION_RUNTIME_ANIMATION_KEYFRAME_H_


namespace ozz {
namespace animation {

Animation::Animation() : duration_(0.f), num_tracks_(0), name_(NULL) {}

Animation::~Animation() { Deallocate(); }

void Animation::Allocate(size_t _name_len, size_t _translation_count,
                         size_t _rotation_count, size_t _scale_count) {
  // Distributes buffer memory while ensuring proper alignment (serves larger
  // alignment values first).
  OZZ_STATIC_ASSERT(OZZ_ALIGN_OF(TranslationKey) >= OZZ_ALIGN_OF(RotationKey) &&
                    OZZ_ALIGN_OF(RotationKey) >= OZZ_ALIGN_OF(ScaleKey) &&
                    OZZ_ALIGN_OF(ScaleKey) >= OZZ_ALIGN_OF(char));

  assert(name_ == NULL && translations_.size() == 0 && rotations_.size() == 0 &&
         scales_.size() == 0);

  // Compute overall size and allocate a single buffer for all the data.
  const size_t buffer_size = (_name_len > 0 ? _name_len + 1 : 0) +
                             _translation_count * sizeof(TranslationKey) +
                             _rotation_count * sizeof(RotationKey) +
                             _scale_count * sizeof(ScaleKey);
  char* buffer = reinterpret_cast<char*>(memory::default_allocator()->Allocate(
      buffer_size, OZZ_ALIGN_OF(TranslationKey)));

  // Fix up pointers. Serves larger alignment values first.
  translations_.begin = reinterpret_cast<TranslationKey*>(buffer);
  assert(math::IsAligned(translations_.begin, OZZ_ALIGN_OF(TranslationKey)));
  buffer += _translation_count * sizeof(TranslationKey);
  translations_.end = reinterpret_cast<TranslationKey*>(buffer);

  rotations_.begin = reinterpret_cast<RotationKey*>(buffer);
  assert(math::IsAligned(rotations_.begin, OZZ_ALIGN_OF(RotationKey)));
  buffer += _rotation_count * sizeof(RotationKey);
  rotations_.end = reinterpret_cast<RotationKey*>(buffer);

  scales_.begin = reinterpret_cast<ScaleKey*>(buffer);
  assert(math::IsAligned(scales_.begin, OZZ_ALIGN_OF(ScaleKey)));
  buffer += _scale_count * sizeof(ScaleKey);
  scales_.end = reinterpret_cast<ScaleKey*>(buffer);

  // Let name be NULL if animation has no name. Allows to avoid allocating this
  // buffer in the constructor of empty animations.
  name_ = reinterpret_cast<char*>(_name_len > 0 ? buffer : NULL);
  assert(math::IsAligned(name_, OZZ_ALIGN_OF(char)));
}

void Animation::Deallocate() {
  memory::default_allocator()->Deallocate(translations_.begin);

  name_ = NULL;
  translations_ = ozz::Range<TranslationKey>();
  rotations_ = ozz::Range<RotationKey>();
  scales_ = ozz::Range<ScaleKey>();
}

size_t Animation::size() const {
  const size_t size =
      sizeof(*this) + translations_.size() + rotations_.size() + scales_.size();
  return size;
}

void Animation::Save(ozz::io::OArchive& _archive) const {
  _archive << duration_;
  _archive << static_cast<int32_t>(num_tracks_);

  const size_t name_len = name_ ? std::strlen(name_) : 0;
  _archive << static_cast<int32_t>(name_len);

  const ptrdiff_t translation_count = translations_.count();
  _archive << static_cast<int32_t>(translation_count);
  const ptrdiff_t rotation_count = rotations_.count();
  _archive << static_cast<int32_t>(rotation_count);
  const ptrdiff_t scale_count = scales_.count();
  _archive << static_cast<int32_t>(scale_count);

  _archive << ozz::io::MakeArray(name_, name_len);

  for (ptrdiff_t i = 0; i < translation_count; ++i) {
    const TranslationKey& key = translations_.begin[i];
    _archive << key.ratio;
    _archive << key.track;
    _archive << ozz::io::MakeArray(key.value);
  }

  for (ptrdiff_t i = 0; i < rotation_count; ++i) {
    const RotationKey& key = rotations_.begin[i];
    _archive << key.ratio;
    uint16_t track = key.track;
    _archive << track;
    uint8_t largest = key.largest;
    _archive << largest;
    bool sign = key.sign;
    _archive << sign;
    _archive << ozz::io::MakeArray(key.value);
  }

  for (ptrdiff_t i = 0; i < scale_count; ++i) {
    const ScaleKey& key = scales_.begin[i];
    _archive << key.ratio;
    _archive << key.track;
    _archive << ozz::io::MakeArray(key.value);
  }
}

void Animation::Load(ozz::io::IArchive& _archive, uint32_t _version) {
  // Destroy animation in case it was already used before.
  Deallocate();
  duration_ = 0.f;
  num_tracks_ = 0;

  // No retro-compatibility with anterior versions.
  if (_version != 6) {
    log::Err() << "Unsupported Animation version " << _version << "."
               << std::endl;
    return;
  }

  _archive >> duration_;

  int32_t num_tracks;
  _archive >> num_tracks;
  num_tracks_ = num_tracks;

  int32_t name_len;
  _archive >> name_len;
  int32_t translation_count;
  _archive >> translation_count;
  int32_t rotation_count;
  _archive >> rotation_count;
  int32_t scale_count;
  _archive >> scale_count;

  Allocate(name_len, translation_count, rotation_count, scale_count);

  if (name_) {  // NULL name_ is supported.
    _archive >> ozz::io::MakeArray(name_, name_len);
    name_[name_len] = 0;
  }

  for (int i = 0; i < translation_count; ++i) {
    TranslationKey& key = translations_.begin[i];
    _archive >> key.ratio;
    _archive >> key.track;
    _archive >> ozz::io::MakeArray(key.value);
  }

  for (int i = 0; i < rotation_count; ++i) {
    RotationKey& key = rotations_.begin[i];
    _archive >> key.ratio;
    uint16_t track;
    _archive >> track;
    key.track = track;
    uint8_t largest;
    _archive >> largest;
    key.largest = largest & 3;
    bool sign;
    _archive >> sign;
    key.sign = sign & 1;
    _archive >> ozz::io::MakeArray(key.value);
  }

  for (int i = 0; i < scale_count; ++i) {
    ScaleKey& key = scales_.begin[i];
    _archive >> key.ratio;
    _archive >> key.track;
    _archive >> ozz::io::MakeArray(key.value);
  }
}
}  // namespace animation
}  // namespace ozz

// Including blending_job.cc file.

//----------------------------------------------------------------------------//
//                                                                            //
// ozz-animation is hosted at http://github.com/guillaumeblanc/ozz-animation  //
// and distributed under the MIT License (MIT).                               //
//                                                                            //
// Copyright (c) 2019 Guillaume Blanc                                         //
//                                                                            //
// Permission is hereby granted, free of charge, to any person obtaining a    //
// copy of this software and associated documentation files (the "Software"), //
// to deal in the Software without restriction, including without limitation  //
// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //
// and/or sell copies of the Software, and to permit persons to whom the      //
// Software is furnished to do so, subject to the following conditions:       //
//                                                                            //
// The above copyright notice and this permission notice shall be included in //
// all copies or substantial portions of the Software.                        //
//                                                                            //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    //
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    //
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        //
// DEALINGS IN THE SOFTWARE.                                                  //
//                                                                            //
//----------------------------------------------------------------------------//

#include "ozz/animation/runtime/blending_job.h"

#include <cassert>
#include <cstddef>

#include "ozz/animation/runtime/skeleton.h"

#include "ozz/base/maths/math_ex.h"
#include "ozz/base/maths/soa_transform.h"

namespace ozz {
namespace animation {

BlendingJob::Layer::Layer() : weight(0.f) {}

BlendingJob::BlendingJob() : threshold(.1f) {}

namespace {
bool ValidateLayer(const BlendingJob::Layer& _layer, ptrdiff_t _min_range) {
  bool valid = true;

  // Tests transforms validity.
  valid &= _layer.transform.begin != NULL;
  valid &= _layer.transform.end >= _layer.transform.begin;
  valid &= _layer.transform.end - _layer.transform.begin >= _min_range;

  // Joint weights are optional.
  if (_layer.joint_weights.begin != NULL) {
    valid &= _layer.joint_weights.end >= _layer.joint_weights.begin;
    valid &=
        _layer.joint_weights.end - _layer.joint_weights.begin >= _min_range;
  } else {
    valid &= _layer.joint_weights.end == NULL;
  }
  return valid;
}
}  // namespace

bool BlendingJob::Validate() const {
  // Don't need any early out, as jobs are valid in most of the performance
  // critical cases.
  // Tests are written in multiple lines in order to avoid branches.
  bool valid = true;

  // Test for valid threshold).
  valid &= threshold > 0.f;

  // Test for NULL begin pointers.
  // Blending layers are mandatory, additive aren't.
  valid &= bind_pose.begin != NULL;
  valid &= output.begin != NULL;

  // Test ranges are valid (implicitly test for NULL end pointers).
  valid &= bind_pose.end >= bind_pose.begin;
  valid &= output.end >= output.begin;

  // The bind pose size defines the ranges of transforms to blend, so all
  // other buffers should be bigger.
  const ptrdiff_t min_range = bind_pose.end - bind_pose.begin;
  valid &= output.end - output.begin >= min_range;

  // Blend layers are optional.
  if (layers.begin != NULL) {
    valid &= layers.end >= layers.begin;
  } else {
    valid &= layers.end == NULL;
  }

  // Validates layers.
  for (const Layer* layer = layers.begin; layers.begin && layer < layers.end;
       ++layer) {
    valid &= ValidateLayer(*layer, min_range);
  }

  // Additive layers are optional.
  if (additive_layers.begin != NULL) {
    valid &= additive_layers.end >= additive_layers.begin;
  } else {
    valid &= additive_layers.end == NULL;
  }

  // Validates additive layers.
  for (const Layer* layer = additive_layers.begin;
       additive_layers.begin &&
       layer < additive_layers.end;  // Handles NULL pointers.
       ++layer) {
    valid &= ValidateLayer(*layer, min_range);
  }

  return valid;
}

namespace {

// Macro that defines the process of blending the 1st pass.
#define OZZ_BLEND_1ST_PASS(_in, _simd_weight, _out)     \
  {                                                     \
    _out->translation = _in.translation * _simd_weight; \
    _out->rotation = _in.rotation * _simd_weight;       \
    _out->scale = _in.scale * _simd_weight;             \
  }

// Macro that defines the process of blending any pass but the first.
#define OZZ_BLEND_N_PASS(_in, _simd_weight, _out)                           \
  {                                                                         \
    /* Blends translation. */                                               \
    _out->translation = _out->translation + _in.translation * _simd_weight; \
    /* Blends rotations, negates opposed quaternions to be sure to choose*/ \
    /* the shortest path between the two.*/                                 \
    const math::SimdFloat4 dot = _out->rotation.x * _in.rotation.x +        \
                                 _out->rotation.y * _in.rotation.y +        \
                                 _out->rotation.z * _in.rotation.z +        \
                                 _out->rotation.w * _in.rotation.w;         \
    const math::SimdInt4 sign = math::Sign(dot);                            \
    const math::SoaQuaternion rotation = {                                  \
        math::Xor(_in.rotation.x, sign), math::Xor(_in.rotation.y, sign),   \
        math::Xor(_in.rotation.z, sign), math::Xor(_in.rotation.w, sign)};  \
    _out->rotation = _out->rotation + rotation * _simd_weight;              \
    /* Blends scales.*/                                                     \
    _out->scale = _out->scale + _in.scale * _simd_weight;                   \
  }

// Macro that defines the process of adding a pass.
#define OZZ_ADD_PASS(_in, _simd_weight, _out)                                \
  {                                                                          \
    _out.translation = _out.translation + _in.translation * _simd_weight;    \
    /* Interpolate quaternion between identity and src.rotation.*/           \
    /* Quaternion sign is fixed up, so that lerp takes the shortest path.*/  \
    const math::SimdInt4 sign = math::Sign(_in.rotation.w);                  \
    const math::SoaQuaternion rotation = {                                   \
        math::Xor(_in.rotation.x, sign), math::Xor(_in.rotation.y, sign),    \
        math::Xor(_in.rotation.z, sign), math::Xor(_in.rotation.w, sign)};   \
    const math::SoaQuaternion interp_quat = {                                \
        rotation.x * _simd_weight, rotation.y * _simd_weight,                \
        rotation.z * _simd_weight, (rotation.w - one) * _simd_weight + one}; \
    _out.rotation = NormalizeEst(interp_quat) * _out.rotation;               \
    _out.scale =                                                             \
        _out.scale * (one_minus_weight_f3 + (_in.scale * _simd_weight));     \
  }

// Macro that defines the process of subtracting a pass.
#define OZZ_SUB_PASS(_in, _simd_weight, _out)                                  \
  {                                                                            \
    _out.translation = _out.translation - _in.translation * _simd_weight;      \
    /* Interpolate quaternion between identity and src.rotation.*/             \
    /* Quaternion sign is fixed up, so that lerp takes the shortest path.*/    \
    const math::SimdInt4 sign = math::Sign(_in.rotation.w);                    \
    const math::SoaQuaternion rotation = {                                     \
        math::Xor(_in.rotation.x, sign), math::Xor(_in.rotation.y, sign),      \
        math::Xor(_in.rotation.z, sign), math::Xor(_in.rotation.w, sign)};     \
    const math::SoaQuaternion interp_quat = {                                  \
        rotation.x * _simd_weight, rotation.y * _simd_weight,                  \
        rotation.z * _simd_weight, (rotation.w - one) * _simd_weight + one};   \
    _out.rotation = Conjugate(NormalizeEst(interp_quat)) * _out.rotation;      \
    const math::SoaFloat3 rcp_scale = {                                        \
        math::RcpEst(math::MAdd(_in.scale.x, _simd_weight, one_minus_weight)), \
        math::RcpEst(math::MAdd(_in.scale.y, _simd_weight, one_minus_weight)), \
        math::RcpEst(                                                          \
            math::MAdd(_in.scale.z, _simd_weight, one_minus_weight))};         \
    _out.scale = _out.scale * rcp_scale;                                       \
  }

// Defines parameters that are passed through blending stages.
struct ProcessArgs {
  ProcessArgs(const BlendingJob& _job)
      : job(_job),
        num_soa_joints(_job.bind_pose.end - _job.bind_pose.begin),
        num_passes(0),
        num_partial_passes(0),
        accumulated_weight(0.f) {
    // The range of all buffers has already been validated.
    assert(job.output.end >= job.output.begin + num_soa_joints);
    assert(OZZ_ARRAY_SIZE(accumulated_weights) >= num_soa_joints);
  }

  // Allocates enough space to store a accumulated weights per-joint.
  // It will be initialized by the first pass processed, if any.
  // This is quite big for a stack allocation (4 byte * maximum number of
  // joints). This is one of the reasons why the number of joints is limited
  // by the API.
  // Note that this array is used with SoA data.
  // This is the first argument in order to avoid wasting too much space with
  // alignment padding.
  math::SimdFloat4 accumulated_weights[Skeleton::kMaxSoAJoints];

  // The job to process.
  const BlendingJob& job;

  // The number of transforms to process as defined by the size of the bind
  // pose.
  size_t num_soa_joints;

  // Number of processed blended passes (excluding passes with a weight <= 0.f),
  // including partial passes.
  int num_passes;

  // Number of processed partial blending passes (aka with a weight per-joint).
  int num_partial_passes;

  // The accumulated weight of all layers.
  float accumulated_weight;

 private:
  // Disables assignment operators.
  ProcessArgs(const ProcessArgs&);
  void operator=(const ProcessArgs&);
};

// Blends all layers of the job to its output.
void BlendLayers(ProcessArgs* _args) {
  assert(_args);

  // Iterates through all layers and blend them to the output.
  for (const BlendingJob::Layer* layer = _args->job.layers.begin;
       layer < _args->job.layers.end; ++layer) {
    // Asserts buffer sizes, which must never fail as it has been validated.
    assert(layer->transform.end >=
           layer->transform.begin + _args->num_soa_joints);
    assert(!layer->joint_weights.begin ||
           (layer->joint_weights.end >=
            layer->joint_weights.begin + _args->num_soa_joints));

    // Skip irrelevant layers.
    if (layer->weight <= 0.f) {
      continue;
    }

    // Accumulates global weights.
    _args->accumulated_weight += layer->weight;
    const math::SimdFloat4 layer_weight =
        math::simd_float4::Load1(layer->weight);

    if (layer->joint_weights.begin) {
      // This layer has per-joint weights.
      ++_args->num_partial_passes;

      if (_args->num_passes == 0) {
        for (size_t i = 0; i < _args->num_soa_joints; ++i) {
          const math::SoaTransform& src = layer->transform.begin[i];
          math::SoaTransform* dest = _args->job.output.begin + i;
          const math::SimdFloat4 weight =
              layer_weight * math::Max0(layer->joint_weights.begin[i]);
          _args->accumulated_weights[i] = weight;
          OZZ_BLEND_1ST_PASS(src, weight, dest);
        }
      } else {
        for (size_t i = 0; i < _args->num_soa_joints; ++i) {
          const math::SoaTransform& src = layer->transform.begin[i];
          math::SoaTransform* dest = _args->job.output.begin + i;
          const math::SimdFloat4 weight =
              layer_weight * math::Max0(layer->joint_weights.begin[i]);
          _args->accumulated_weights[i] =
              _args->accumulated_weights[i] + weight;
          OZZ_BLEND_N_PASS(src, weight, dest);
        }
      }
    } else {
      // This is a full layer.
      if (_args->num_passes == 0) {
        for (size_t i = 0; i < _args->num_soa_joints; ++i) {
          const math::SoaTransform& src = layer->transform.begin[i];
          math::SoaTransform* dest = _args->job.output.begin + i;
          _args->accumulated_weights[i] = layer_weight;
          OZZ_BLEND_1ST_PASS(src, layer_weight, dest);
        }
      } else {
        for (size_t i = 0; i < _args->num_soa_joints; ++i) {
          const math::SoaTransform& src = layer->transform.begin[i];
          math::SoaTransform* dest = _args->job.output.begin + i;
          _args->accumulated_weights[i] =
              _args->accumulated_weights[i] + layer_weight;
          OZZ_BLEND_N_PASS(src, layer_weight, dest);
        }
      }
    }
    // One more pass blended.
    ++_args->num_passes;
  }
}

// Blends bind pose to the output if accumulated weight is less than the
// threshold value.
void BlendBindPose(ProcessArgs* _args) {
  assert(_args);

  // Asserts buffer sizes, which must never fail as it has been validated.
  assert(_args->job.bind_pose.end >=
         _args->job.bind_pose.begin + _args->num_soa_joints);

  if (_args->num_partial_passes == 0) {
    // No partial blending pass detected, threshold can be tested globally.
    const float bp_weight = _args->job.threshold - _args->accumulated_weight;

    if (bp_weight > 0.f) {  // The bind-pose is needed if it has a weight.
      if (_args->num_passes == 0) {
        // Strictly copying bind-pose.
        _args->accumulated_weight = 1.f;
        for (size_t i = 0; i < _args->num_soa_joints; ++i) {
          _args->job.output.begin[i] = _args->job.bind_pose.begin[i];
        }
      } else {
        // Updates global accumulated weight, but not per-joint weight any more
        // because normalization stage will be global also.
        _args->accumulated_weight = _args->job.threshold;

        const math::SimdFloat4 simd_bp_weight =
            math::simd_float4::Load1(bp_weight);

        for (size_t i = 0; i < _args->num_soa_joints; ++i) {
          const math::SoaTransform& src = _args->job.bind_pose.begin[i];
          math::SoaTransform* dest = _args->job.output.begin + i;
          OZZ_BLEND_N_PASS(src, simd_bp_weight, dest);
        }
      }
    }
  } else {
    // Blending passes contain partial blending, threshold must be tested for
    // each joint.
    const math::SimdFloat4 threshold =
        math::simd_float4::Load1(_args->job.threshold);

    // There's been at least 1 pass as num_partial_passes != 0.
    assert(_args->num_passes != 0);

    for (size_t i = 0; i < _args->num_soa_joints; ++i) {
      const math::SoaTransform& src = _args->job.bind_pose.begin[i];
      math::SoaTransform* dest = _args->job.output.begin + i;
      const math::SimdFloat4 bp_weight =
          math::Max0(threshold - _args->accumulated_weights[i]);
      _args->accumulated_weights[i] =
          math::Max(threshold, _args->accumulated_weights[i]);
      OZZ_BLEND_N_PASS(src, bp_weight, dest);
    }
  }
}

// Normalizes output rotations. Quaternion length cannot be zero as opposed
// quaternions have been fixed up during blending passes.
// Translations and scales are already normalized because weights were
// pre-multiplied by the normalization ratio.
void Normalize(ProcessArgs* _args) {
  assert(_args);

  if (_args->num_partial_passes == 0) {
    // Normalization of a non-partial blending requires to apply the same
    // division to all joints.
    const math::SimdFloat4 ratio =
        math::simd_float4::Load1(1.f / _args->accumulated_weight);
    for (size_t i = 0; i < _args->num_soa_joints; ++i) {
      math::SoaTransform& dest = _args->job.output.begin[i];
      dest.rotation = NormalizeEst(dest.rotation);
      dest.translation = dest.translation * ratio;
      dest.scale = dest.scale * ratio;
    }
  } else {
    // Partial blending normalization requires to compute the divider per-joint.
    const math::SimdFloat4 one = math::simd_float4::one();
    for (size_t i = 0; i < _args->num_soa_joints; ++i) {
      const math::SimdFloat4 ratio = one / _args->accumulated_weights[i];
      math::SoaTransform& dest = _args->job.output.begin[i];
      dest.rotation = NormalizeEst(dest.rotation);
      dest.translation = dest.translation * ratio;
      dest.scale = dest.scale * ratio;
    }
  }
}

// Process additive blending pass.
void AddLayers(ProcessArgs* _args) {
  assert(_args);

  // Iterates through all layers and blend them to the output.
  for (const BlendingJob::Layer* layer = _args->job.additive_layers.begin;
       layer < _args->job.additive_layers.end; ++layer) {
    // Asserts buffer sizes, which must never fail as it has been validated.
    assert(layer->transform.end >=
           layer->transform.begin + _args->num_soa_joints);
    assert(!layer->joint_weights.begin ||
           (layer->joint_weights.end >=
            layer->joint_weights.begin + _args->num_soa_joints));

    // Prepares constants.
    const math::SimdFloat4 one = math::simd_float4::one();

    if (layer->weight > 0.f) {
      // Weight is positive, need to perform additive blending.
      const math::SimdFloat4 layer_weight =
          math::simd_float4::Load1(layer->weight);

      if (layer->joint_weights.begin) {
        // This layer has per-joint weights.
        for (size_t i = 0; i < _args->num_soa_joints; ++i) {
          const math::SoaTransform& src = layer->transform.begin[i];
          math::SoaTransform& dest = _args->job.output.begin[i];
          const math::SimdFloat4 weight =
              layer_weight * math::Max0(layer->joint_weights.begin[i]);
          const math::SimdFloat4 one_minus_weight = one - weight;
          const math::SoaFloat3 one_minus_weight_f3 = {
              one_minus_weight, one_minus_weight, one_minus_weight};
          OZZ_ADD_PASS(src, weight, dest);
        }
      } else {
        // This is a full layer.
        const math::SimdFloat4 one_minus_weight = one - layer_weight;
        const math::SoaFloat3 one_minus_weight_f3 = {
            one_minus_weight, one_minus_weight, one_minus_weight};

        for (size_t i = 0; i < _args->num_soa_joints; ++i) {
          const math::SoaTransform& src = layer->transform.begin[i];
          math::SoaTransform& dest = _args->job.output.begin[i];
          OZZ_ADD_PASS(src, layer_weight, dest);
        }
      }
    } else if (layer->weight < 0.f) {
      // Weight is negative, need to perform subtractive blending.
      const math::SimdFloat4 layer_weight =
          math::simd_float4::Load1(-layer->weight);

      if (layer->joint_weights.begin) {
        // This layer has per-joint weights.
        for (size_t i = 0; i < _args->num_soa_joints; ++i) {
          const math::SoaTransform& src = layer->transform.begin[i];
          math::SoaTransform& dest = _args->job.output.begin[i];
          const math::SimdFloat4 weight =
              layer_weight * math::Max0(layer->joint_weights.begin[i]);
          const math::SimdFloat4 one_minus_weight = one - weight;
          OZZ_SUB_PASS(src, weight, dest);
        }
      } else {
        // This is a full layer.
        const math::SimdFloat4 one_minus_weight = one - layer_weight;
        for (size_t i = 0; i < _args->num_soa_joints; ++i) {
          const math::SoaTransform& src = layer->transform.begin[i];
          math::SoaTransform& dest = _args->job.output.begin[i];
          OZZ_SUB_PASS(src, layer_weight, dest);
        }
      }
    } else {
      // Skip layer as its weight is 0.
    }
  }
}
}  // namespace

bool BlendingJob::Run() const {
  if (!Validate()) {
    return false;
  }

  // Initializes blended parameters that are exchanged across blend stages.
  ProcessArgs process_args(*this);

  // Blends all layers to the job output buffers.
  BlendLayers(&process_args);

  // Applies bind pose.
  BlendBindPose(&process_args);

  // Normalizes output.
  Normalize(&process_args);

  // Process additive blending.
  AddLayers(&process_args);

  return true;
}
}  // namespace animation
}  // namespace ozz

// Including ik_aim_job.cc file.

//----------------------------------------------------------------------------//
//                                                                            //
// ozz-animation is hosted at http://github.com/guillaumeblanc/ozz-animation  //
// and distributed under the MIT License (MIT).                               //
//                                                                            //
// Copyright (c) 2019 Guillaume Blanc                                         //
//                                                                            //
// Permission is hereby granted, free of charge, to any person obtaining a    //
// copy of this software and associated documentation files (the "Software"), //
// to deal in the Software without restriction, including without limitation  //
// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //
// and/or sell copies of the Software, and to permit persons to whom the      //
// Software is furnished to do so, subject to the following conditions:       //
//                                                                            //
// The above copyright notice and this permission notice shall be included in //
// all copies or substantial portions of the Software.                        //
//                                                                            //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    //
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    //
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        //
// DEALINGS IN THE SOFTWARE.                                                  //
//                                                                            //
//----------------------------------------------------------------------------//

#include "ozz/animation/runtime/ik_aim_job.h"

#include <cassert>

#include "ozz/base/maths/math_ex.h"
#include "ozz/base/maths/simd_quaternion.h"

using namespace ozz::math;

namespace ozz {
namespace animation {
IKAimJob::IKAimJob()
    : target(simd_float4::zero()),
      forward(simd_float4::x_axis()),
      offset(simd_float4::zero()),
      up(simd_float4::y_axis()),
      pole_vector(simd_float4::y_axis()),
      twist_angle(0.f),
      weight(1.f),
      joint(NULL),
      joint_correction(NULL),
      reached(NULL) {}

bool IKAimJob::Validate() const {
  bool valid = true;
  valid &= joint != NULL;
  valid &= joint_correction != NULL;
  valid &= ozz::math::AreAllTrue1(ozz::math::IsNormalizedEst3(forward));
  return valid;
}

namespace {

// When there's an offset, the forward vector needs to be recomputed.
// The idea is to find the vector that will allow the point at offset position
// to aim at target position. This vector starts at joint position. It ends on a
// line perpendicular to pivot-offset line, at the intersection with the sphere
// defined by target position (centered on joint position). See geogebra
// diagram: media/doc/src/ik_aim_offset.ggb
bool ComputeOffsettedForward(_SimdFloat4 _forward, _SimdFloat4 _offset,
                             _SimdFloat4 _target,
                             SimdFloat4* _offsetted_forward) {
  // AO is projected offset vector onto the normalized forward vector.
  assert(ozz::math::AreAllTrue1(ozz::math::IsNormalizedEst3(_forward)));
  const SimdFloat4 AOl = Dot3(_forward, _offset);

  // Compute square length of ac using Pythagorean theorem.
  const SimdFloat4 ACl2 = Length3Sqr(_offset) - AOl * AOl;

  // Square length of target vector, aka circle radius.
  const SimdFloat4 r2 = Length3Sqr(_target);

  // If offset is outside of the sphere defined by target length, the target
  // isn't reachable.
  if (AreAllTrue1(CmpGt(ACl2, r2))) {
    return false;
  }

  // AIl is the length of the vector from offset to sphere intersection.
  const SimdFloat4 AIl = SqrtX(r2 - ACl2);

  // The distance from offset position to the intersection with the sphere is
  // (AIl - AOl) Intersection point on the sphere can thus be computed.
  *_offsetted_forward = _offset + _forward * SplatX(AIl - AOl);

  return true;
}
}  // namespace

bool IKAimJob::Run() const {
  if (!Validate()) {
    return false;
  }

  using math::Float4x4;
  using math::SimdFloat4;
  using math::SimdQuaternion;

  // If matrices aren't invertible, they'll be all 0 (ozz::math
  // implementation), which will result in identity correction quaternions.
  SimdInt4 invertible;
  const Float4x4 inv_joint = Invert(*joint, &invertible);

  // Computes joint to target vector, in joint local-space (_js).
  const SimdFloat4 joint_to_target_js = TransformPoint(inv_joint, target);
  const SimdFloat4 joint_to_target_js_len2 = Length3Sqr(joint_to_target_js);

  // Recomputes forward vector to account for offset.
  // If the offset is further than target, it won't be reachable.
  SimdFloat4 offsetted_forward;
  bool lreached = ComputeOffsettedForward(forward, offset, joint_to_target_js,
                                          &offsetted_forward);
  // Copies reachability result.
  // If offsetted forward vector doesn't exists, target position cannot be
  // aimed.
  if (reached != NULL) {
    *reached = lreached;
  }

  if (!lreached ||
      AreAllTrue1(CmpEq(joint_to_target_js_len2, simd_float4::zero()))) {
    // Target can't be reached or is too close to joint position to find a
    // direction.
    *joint_correction = SimdQuaternion::identity();
    return true;
  }

  // Calculates joint_to_target_rot_ss quaternion which solves for
  // offsetted_forward vector rotating onto the target.
  const SimdQuaternion joint_to_target_rot_js =
      SimdQuaternion::FromVectors(offsetted_forward, joint_to_target_js);

  // Calculates rotate_plane_js quaternion which aligns joint up to the pole
  // vector.
  const SimdFloat4 corrected_up_js =
      TransformVector(joint_to_target_rot_js, up);

  // Compute (and normalize) reference and pole planes normals.
  const SimdFloat4 pole_vector_js = TransformVector(inv_joint, pole_vector);
  const SimdFloat4 ref_joint_normal_js =
      Cross3(pole_vector_js, joint_to_target_js);
  const SimdFloat4 joint_normal_js =
      Cross3(corrected_up_js, joint_to_target_js);
  const SimdFloat4 ref_joint_normal_js_len2 = Length3Sqr(ref_joint_normal_js);
  const SimdFloat4 joint_normal_js_len2 = Length3Sqr(joint_normal_js);

  const SimdFloat4 denoms =
      SetZ(SetY(joint_to_target_js_len2, joint_normal_js_len2),
           ref_joint_normal_js_len2);

  SimdFloat4 rotate_plane_axis_js;
  SimdQuaternion rotate_plane_js;
  // Computing rotation axis and plane requires valid normals.
  if (AreAllTrue3(CmpNe(denoms, simd_float4::zero()))) {
    const SimdFloat4 rsqrts =
        RSqrtEstNR(SetZ(SetY(joint_to_target_js_len2, joint_normal_js_len2),
                        ref_joint_normal_js_len2));

    // Computes rotation axis, which is either joint_to_target_js or
    // -joint_to_target_js depending on rotation direction.
    rotate_plane_axis_js = joint_to_target_js * SplatX(rsqrts);

    // Computes angle cosine between the 2 normalized plane normals.
    const SimdFloat4 rotate_plane_cos_angle = Dot3(
        joint_normal_js * SplatY(rsqrts), ref_joint_normal_js * SplatZ(rsqrts));
    const SimdFloat4 axis_flip =
        And(SplatX(Dot3(ref_joint_normal_js, corrected_up_js)),
            simd_int4::mask_sign());
    const SimdFloat4 rotate_plane_axis_flipped_js =
        Xor(rotate_plane_axis_js, axis_flip);

    // Builds quaternion along rotation axis.
    const SimdFloat4 one = simd_float4::one();
    rotate_plane_js = SimdQuaternion::FromAxisCosAngle(
        rotate_plane_axis_flipped_js, Clamp(-one, rotate_plane_cos_angle, one));
  } else {
    rotate_plane_axis_js = joint_to_target_js * SplatX(RSqrtEstXNR(denoms));
    rotate_plane_js = SimdQuaternion::identity();
  }

  // Twists rotation plane.
  SimdQuaternion twisted;
  if (twist_angle != 0.f) {
    // If a twist angle is provided, rotation angle is rotated around joint to
    // target vector.
    const SimdQuaternion twist_ss = SimdQuaternion::FromAxisAngle(
        rotate_plane_axis_js, simd_float4::Load1(twist_angle));
    twisted = twist_ss * rotate_plane_js * joint_to_target_rot_js;
  } else {
    twisted = rotate_plane_js * joint_to_target_rot_js;
  }

  // Weights output quaternion.

  // Fix up quaternions so w is always positive, which is required for NLerp
  // (with identity quaternion) to lerp the shortest path.
  const SimdFloat4 twisted_fu =
      Xor(twisted.xyzw, And(simd_int4::mask_sign(),
                            CmpLt(SplatW(twisted.xyzw), simd_float4::zero())));

  if (weight < 1.f) {
    // NLerp start and mid joint rotations.
    const SimdFloat4 identity = simd_float4::w_axis();
    const SimdFloat4 simd_weight = Max0(simd_float4::Load1(weight));
    joint_correction->xyzw =
        NormalizeEst4(Lerp(identity, twisted.xyzw, simd_weight));
  } else {
    // Quaternion doesn't need interpolation
    joint_correction->xyzw = twisted_fu;
  }

  return true;
}
}  // namespace animation
}  // namespace ozz

// Including ik_two_bone_job.cc file.

//----------------------------------------------------------------------------//
//                                                                            //
// ozz-animation is hosted at http://github.com/guillaumeblanc/ozz-animation  //
// and distributed under the MIT License (MIT).                               //
//                                                                            //
// Copyright (c) 2019 Guillaume Blanc                                         //
//                                                                            //
// Permission is hereby granted, free of charge, to any person obtaining a    //
// copy of this software and associated documentation files (the "Software"), //
// to deal in the Software without restriction, including without limitation  //
// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //
// and/or sell copies of the Software, and to permit persons to whom the      //
// Software is furnished to do so, subject to the following conditions:       //
//                                                                            //
// The above copyright notice and this permission notice shall be included in //
// all copies or substantial portions of the Software.                        //
//                                                                            //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    //
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    //
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        //
// DEALINGS IN THE SOFTWARE.                                                  //
//                                                                            //
//----------------------------------------------------------------------------//

#include "ozz/animation/runtime/ik_two_bone_job.h"

#include <cassert>

#include "ozz/base/log.h"
#include "ozz/base/maths/math_ex.h"
#include "ozz/base/maths/simd_quaternion.h"

using namespace ozz::math;

namespace ozz {
namespace animation {
IKTwoBoneJob::IKTwoBoneJob()
    : target(math::simd_float4::zero()),
      mid_axis(math::simd_float4::z_axis()),
      pole_vector(math::simd_float4::y_axis()),
      twist_angle(0.f),
      soften(1.f),
      weight(1.f),
      start_joint(NULL),
      mid_joint(NULL),
      end_joint(NULL),
      start_joint_correction(NULL),
      mid_joint_correction(NULL),
      reached(NULL) {}

bool IKTwoBoneJob::Validate() const {
  bool valid = true;
  valid &= start_joint && mid_joint && end_joint;
  valid &= start_joint_correction && mid_joint_correction;
  valid &= ozz::math::AreAllTrue1(ozz::math::IsNormalizedEst3(mid_axis));
  return valid;
}

namespace {

// Local data structure used to share constant data accross ik stages.
struct IKConstantSetup {
  IKConstantSetup(const IKTwoBoneJob& _job) {
    // Prepares constants
    one = simd_float4::one();
    mask_sign = simd_int4::mask_sign();
    m_one = Xor(one, mask_sign);

    // Computes inverse matrices required to change to start and mid spaces.
    // If matrices aren't invertible, they'll be all 0 (ozz::math
    // implementation), which will result in identity correction quaternions.
    SimdInt4 invertible;
    (void)invertible;
    inv_start_joint = Invert(*_job.start_joint, &invertible);
    const Float4x4 inv_mid_joint = Invert(*_job.mid_joint, &invertible);

    // Transform some positions to mid joint space (_ms)
    const SimdFloat4 start_ms =
        TransformPoint(inv_mid_joint, _job.start_joint->cols[3]);
    const SimdFloat4 end_ms =
        TransformPoint(inv_mid_joint, _job.end_joint->cols[3]);

    // Transform some positions to start joint space (_ss)
    const SimdFloat4 mid_ss =
        TransformPoint(inv_start_joint, _job.mid_joint->cols[3]);
    const SimdFloat4 end_ss =
        TransformPoint(inv_start_joint, _job.end_joint->cols[3]);

    // Computes bones vectors and length in mid and start spaces.
    // Start joint position will be treated as 0 because all joints are
    // expressed in start joint space.
    start_mid_ms = -start_ms;
    mid_end_ms = end_ms;
    start_mid_ss = mid_ss;
    const SimdFloat4 mid_end_ss = end_ss - mid_ss;
    const SimdFloat4 start_end_ss = end_ss;
    start_mid_ss_len2 = Length3Sqr(start_mid_ss);
    mid_end_ss_len2 = Length3Sqr(mid_end_ss);
    start_end_ss_len2 = Length3Sqr(start_end_ss);
  }

  // Constants
  SimdFloat4 one;
  SimdFloat4 m_one;
  SimdInt4 mask_sign;

  // Inverse matrices
  Float4x4 inv_start_joint;

  // Bones vectors and length in mid and start spaces (_ms and _ss).
  SimdFloat4 start_mid_ms;
  SimdFloat4 mid_end_ms;
  SimdFloat4 start_mid_ss;
  SimdFloat4 start_mid_ss_len2;
  SimdFloat4 mid_end_ss_len2;
  SimdFloat4 start_end_ss_len2;
};

// Smoothen target position when it's further that a ratio of the joint chain
// length, and start to target length isn't 0.
// Inspired by http://www.softimageblog.com/archives/108
// and http://www.ryanjuckett.com/programming/analytic-two-bone-ik-in-2d/
bool SoftenTarget(const IKTwoBoneJob& _job, const IKConstantSetup& _setup,
                  SimdFloat4* _start_target_ss,
                  SimdFloat4* _start_target_ss_len2) {
  // Hanlde position in start joint space (_ss)
  const SimdFloat4 start_target_original_ss =
      TransformPoint(_setup.inv_start_joint, _job.target);
  const SimdFloat4 start_target_original_ss_len2 =
      Length3Sqr(start_target_original_ss);
  const SimdFloat4 lengths =
      Sqrt(SetZ(SetY(_setup.start_mid_ss_len2, _setup.mid_end_ss_len2),
                start_target_original_ss_len2));
  const SimdFloat4 start_mid_ss_len = lengths;
  const SimdFloat4 mid_end_ss_len = SplatY(lengths);
  const SimdFloat4 start_target_original_ss_len = SplatZ(lengths);
  const SimdFloat4 bone_len_diff_abs =
      AndNot(start_mid_ss_len - mid_end_ss_len, _setup.mask_sign);
  const SimdFloat4 bones_chain_len = start_mid_ss_len + mid_end_ss_len;
  const SimdFloat4 da =  // da.yzw needs to be 0
      bones_chain_len *
      Clamp(simd_float4::zero(), simd_float4::LoadX(_job.soften), _setup.one);
  const SimdFloat4 ds = bones_chain_len - da;

  // Sotftens target position if it is further than a ratio (_soften) of the
  // whole bone chain length. Needs to check also that ds and
  // start_target_original_ss_len2 are != 0, because they're used as a
  // denominator.
  // x = start_target_original_ss_len > da
  // y = start_target_original_ss_len > 0
  // z = start_target_original_ss_len > bone_len_diff_abs
  // w = ds                           > 0
  const SimdFloat4 left = SetW(start_target_original_ss_len, ds);
  const SimdFloat4 right = SetZ(da, bone_len_diff_abs);
  const SimdInt4 comp = CmpGt(left, right);
  const int comp_mask = MoveMask(comp);

  // xyw all 1, z is untested.
  if ((comp_mask & 0xb) == 0xb) {
    // Finds interpolation ratio (aka alpha).
    const SimdFloat4 alpha = (start_target_original_ss_len - da) * RcpEstX(ds);
    // Approximate an exponential function with : 1-(3^4)/(alpha+3)^4
    // The derivative must be 1 for x = 0, and y must never exceeds 1.
    // Negative x aren't used.
    const SimdFloat4 three = simd_float4::Load1(3.f);
    const SimdFloat4 op = SetY(three, alpha + three);
    const SimdFloat4 op2 = op * op;
    const SimdFloat4 op4 = op2 * op2;
    const SimdFloat4 ratio = op4 * RcpEstX(SplatY(op4));

    // Recomputes start_target_ss vector and length.
    const SimdFloat4 start_target_ss_len = da + ds - ds * ratio;
    *_start_target_ss_len2 = start_target_ss_len * start_target_ss_len;
    *_start_target_ss =
        start_target_original_ss *
        SplatX(start_target_ss_len * RcpEstX(start_target_original_ss_len));
  } else {
    *_start_target_ss = start_target_original_ss;
    *_start_target_ss_len2 = start_target_original_ss_len2;
  }

  // The maximum distance we can reach is the soften bone chain length: da
  // (stored in !x). The minimum distance we can reach is the absolute value of
  // the difference of the 2 bone lengths, |d1−d2| (stored in z). x is 0 and z
  // is 1, yw are untested.
  return (comp_mask & 0x5) == 0x4;
}

SimdQuaternion ComputeMidJoint(const IKTwoBoneJob& _job,
                               const IKConstantSetup& _setup,
                               _SimdFloat4 _start_target_ss_len2) {
  // Computes expected angle at mid_ss joint, using law of cosine (generalized
  // Pythagorean).
  // c^2 = a^2 + b^2 - 2ab cosC
  // cosC = (a^2 + b^2 - c^2) / 2ab
  // Computes both corrected and initial mid joint angles
  // cosine within a single SimdFloat4 (corrected is x component, initial is y).
  const SimdFloat4 start_mid_end_sum_ss_len2 =
      _setup.start_mid_ss_len2 + _setup.mid_end_ss_len2;
  const SimdFloat4 start_mid_end_ss_half_rlen =
      SplatX(simd_float4::Load1(.5f) *
             RSqrtEstXNR(_setup.start_mid_ss_len2 * _setup.mid_end_ss_len2));
  // Cos value needs to be clamped, as it will exit expected range if
  // start_target_ss_len2 is longer than the triangle can be (start_mid_ss +
  // mid_end_ss).
  const SimdFloat4 mid_cos_angles_unclamped =
      (SplatX(start_mid_end_sum_ss_len2) -
       SetY(_start_target_ss_len2, _setup.start_end_ss_len2)) *
      start_mid_end_ss_half_rlen;
  const SimdFloat4 mid_cos_angles =
      Clamp(_setup.m_one, mid_cos_angles_unclamped, _setup.one);

  // Computes corrected angle
  const SimdFloat4 mid_corrected_angle = ACosX(mid_cos_angles);

  // Computes initial angle.
  // The sign of this angle needs to be decided. It's considered negative if
  // mid-to-end joint is bent backward (mid_axis direction dictates valid
  // bent direction).
  const SimdFloat4 bent_side_ref = Cross3(_setup.start_mid_ms, _job.mid_axis);
  const SimdInt4 bent_side_flip = SplatX(
      CmpLt(Dot3(bent_side_ref, _setup.mid_end_ms), simd_float4::zero()));
  const SimdFloat4 mid_initial_angle =
      Xor(ACosX(SplatY(mid_cos_angles)), And(bent_side_flip, _setup.mask_sign));

  // Finally deduces initial to corrected angle difference.
  const SimdFloat4 mid_angles_diff = mid_corrected_angle - mid_initial_angle;

  // Builds queternion.
  return SimdQuaternion::FromAxisAngle(_job.mid_axis, mid_angles_diff);
}

SimdQuaternion ComputeStartJoint(const IKTwoBoneJob& _job,
                                 const IKConstantSetup& _setup,
                                 const SimdQuaternion& _mid_rot_ms,
                                 _SimdFloat4 _start_target_ss,
                                 _SimdFloat4 _start_target_ss_len2) {
  // Pole vector in start joint space (_ss)
  const SimdFloat4 pole_ss =
      TransformVector(_setup.inv_start_joint, _job.pole_vector);

  // start_mid_ss with quaternion mid_rot_ms applied.
  const SimdFloat4 mid_end_ss_final = TransformVector(
      _setup.inv_start_joint,
      TransformVector(*_job.mid_joint,
                      TransformVector(_mid_rot_ms, _setup.mid_end_ms)));
  const SimdFloat4 start_end_ss_final = _setup.start_mid_ss + mid_end_ss_final;

  // Quaternion for rotating the effector onto the target
  const SimdQuaternion end_to_target_rot_ss =
      SimdQuaternion::FromVectors(start_end_ss_final, _start_target_ss);

  // Calculates rotate_plane_ss quaternion which aligns joint chain plane to
  // the reference plane (pole vector). This can only be computed if start
  // target axis is valid (not 0 length)
  // -------------------------------------------------
  SimdQuaternion start_rot_ss = end_to_target_rot_ss;
  if (AreAllTrue1(CmpGt(_start_target_ss_len2, simd_float4::zero()))) {
    // Computes each plane normal.
    const ozz::math::SimdFloat4 ref_plane_normal_ss =
        Cross3(_start_target_ss, pole_ss);
    const ozz::math::SimdFloat4 ref_plane_normal_ss_len2 =
        ozz::math::Length3Sqr(ref_plane_normal_ss);
    // Computes joint chain plane normal, which is the same as mid joint axis
    // (same triangle).
    const ozz::math::SimdFloat4 mid_axis_ss =
        TransformVector(_setup.inv_start_joint,
                        TransformVector(*_job.mid_joint, _job.mid_axis));
    const ozz::math::SimdFloat4 joint_plane_normal_ss =
        TransformVector(end_to_target_rot_ss, mid_axis_ss);
    const ozz::math::SimdFloat4 joint_plane_normal_ss_len2 =
        ozz::math::Length3Sqr(joint_plane_normal_ss);
    // Computes all reciprocal square roots at once.
    const SimdFloat4 rsqrts =
        RSqrtEstNR(SetZ(SetY(_start_target_ss_len2, ref_plane_normal_ss_len2),
                        joint_plane_normal_ss_len2));

    // Computes angle cosine between the 2 normalized normals.
    const SimdFloat4 rotate_plane_cos_angle =
        ozz::math::Dot3(ref_plane_normal_ss * SplatY(rsqrts),
                        joint_plane_normal_ss * SplatZ(rsqrts));

    // Computes rotation axis, which is either start_target_ss or
    // -start_target_ss depending on rotation direction.
    const SimdFloat4 rotate_plane_axis_ss = _start_target_ss * SplatX(rsqrts);
    const SimdFloat4 start_axis_flip =
        And(SplatX(Dot3(joint_plane_normal_ss, pole_ss)), _setup.mask_sign);
    const SimdFloat4 rotate_plane_axis_flipped_ss =
        Xor(rotate_plane_axis_ss, start_axis_flip);

    // Builds quaternion along rotation axis.
    const SimdQuaternion rotate_plane_ss = SimdQuaternion::FromAxisCosAngle(
        rotate_plane_axis_flipped_ss,
        Clamp(_setup.m_one, rotate_plane_cos_angle, _setup.one));

    if (_job.twist_angle != 0.f) {
      // If a twist angle is provided, rotation angle is rotated along
      // rotation plane axis.
      const SimdQuaternion twist_ss = SimdQuaternion::FromAxisAngle(
          rotate_plane_axis_ss, simd_float4::Load1(_job.twist_angle));
      start_rot_ss = twist_ss * rotate_plane_ss * end_to_target_rot_ss;
    } else {
      start_rot_ss = rotate_plane_ss * end_to_target_rot_ss;
    }
  }
  return start_rot_ss;
}

void WeightOutput(const IKTwoBoneJob& _job, const IKConstantSetup& _setup,
                  const SimdQuaternion& _start_rot,
                  const SimdQuaternion& _mid_rot) {
  const SimdFloat4 zero = simd_float4::zero();

  // Fix up quaternions so w is always positive, which is required for NLerp
  // (with identity quaternion) to lerp the shortest path.
  const SimdFloat4 start_rot_fu =
      Xor(_start_rot.xyzw,
          And(_setup.mask_sign, CmpLt(SplatW(_start_rot.xyzw), zero)));
  const SimdFloat4 mid_rot_fu = Xor(
      _mid_rot.xyzw, And(_setup.mask_sign, CmpLt(SplatW(_mid_rot.xyzw), zero)));

  if (_job.weight < 1.f) {
    // NLerp start and mid joint rotations.
    const SimdFloat4 identity = simd_float4::w_axis();
    const SimdFloat4 simd_weight = Max(zero, simd_float4::Load1(_job.weight));

    // Lerp
    const SimdFloat4 start_lerp = Lerp(identity, start_rot_fu, simd_weight);
    const SimdFloat4 mid_lerp = Lerp(identity, mid_rot_fu, simd_weight);

    // Normalize
    const SimdFloat4 rsqrts =
        RSqrtEstNR(SetY(Length4Sqr(start_lerp), Length4Sqr(mid_lerp)));
    _job.start_joint_correction->xyzw = start_lerp * SplatX(rsqrts);
    _job.mid_joint_correction->xyzw = mid_lerp * SplatY(rsqrts);
  } else {
    // Quatenions don't need interpolation
    _job.start_joint_correction->xyzw = start_rot_fu;
    _job.mid_joint_correction->xyzw = mid_rot_fu;
  }
}
}  // namespace

bool IKTwoBoneJob::Run() const {
  if (!Validate()) {
    return false;
  }

  // Early out if weight is 0.
  if (weight <= 0.f) {
    // No correction.
    *start_joint_correction = *mid_joint_correction =
        SimdQuaternion::identity();
    // Target isn't reached.
    if (reached) {
      *reached = false;
    }
    return true;
  }

  // Prepares constant ik data.
  const IKConstantSetup setup(*this);

  // Finds soften target position.
  SimdFloat4 start_target_ss;
  SimdFloat4 start_target_ss_len2;
  const bool lreached =
      SoftenTarget(*this, setup, &start_target_ss, &start_target_ss_len2);
  if (reached) {
    *reached = lreached && weight >= 1.f;
  }

  // Calculate mid_rot_local quaternion which solves for the mid_ss joint
  // rotation.
  const SimdQuaternion mid_rot_ms =
      ComputeMidJoint(*this, setup, start_target_ss_len2);

  // Calculates end_to_target_rot_ss quaternion which solves for effector
  // rotating onto the target.
  const SimdQuaternion start_rot_ss = ComputeStartJoint(
      *this, setup, mid_rot_ms, start_target_ss, start_target_ss_len2);

  // Finally apply weight and output quaternions.
  WeightOutput(*this, setup, start_rot_ss, mid_rot_ms);

  return true;
}
}  // namespace animation
}  // namespace ozz

// Including local_to_model_job.cc file.

//----------------------------------------------------------------------------//
//                                                                            //
// ozz-animation is hosted at http://github.com/guillaumeblanc/ozz-animation  //
// and distributed under the MIT License (MIT).                               //
//                                                                            //
// Copyright (c) 2019 Guillaume Blanc                                         //
//                                                                            //
// Permission is hereby granted, free of charge, to any person obtaining a    //
// copy of this software and associated documentation files (the "Software"), //
// to deal in the Software without restriction, including without limitation  //
// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //
// and/or sell copies of the Software, and to permit persons to whom the      //
// Software is furnished to do so, subject to the following conditions:       //
//                                                                            //
// The above copyright notice and this permission notice shall be included in //
// all copies or substantial portions of the Software.                        //
//                                                                            //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    //
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    //
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        //
// DEALINGS IN THE SOFTWARE.                                                  //
//                                                                            //
//----------------------------------------------------------------------------//

#include "ozz/animation/runtime/local_to_model_job.h"

#include <cassert>

#include "ozz/base/maths/math_ex.h"
#include "ozz/base/maths/simd_math.h"
#include "ozz/base/maths/soa_float4x4.h"
#include "ozz/base/maths/soa_transform.h"

#include "ozz/animation/runtime/skeleton.h"

namespace ozz {
namespace animation {

LocalToModelJob::LocalToModelJob()
    : skeleton(NULL),
      root(NULL),
      from(Skeleton::kNoParent),
      to(Skeleton::kMaxJoints),
      from_excluded(false) {}

bool LocalToModelJob::Validate() const {
  // Don't need any early out, as jobs are valid in most of the performance
  // critical cases.
  // Tests are written in multiple lines in order to avoid branches.
  bool valid = true;

  // Test for NULL begin pointers.
  if (!skeleton) {
    return false;
  }

  const int num_joints = skeleton->num_joints();
  const int num_soa_joints = (num_joints + 3) / 4;

  // Test input and output ranges, implicitly tests for NULL end pointers.
  valid &= input.end - input.begin >= num_soa_joints;
  valid &= output.end - output.begin >= num_joints;

  return valid;
}

bool LocalToModelJob::Run() const {
  if (!Validate()) {
    return false;
  }

  const Range<const int16_t>& parents = skeleton->joint_parents();

  // Initializes an identity matrix that will be used to compute roots model
  // matrices without requiring a branch.
  const math::Float4x4 identity = math::Float4x4::identity();
  const math::Float4x4* root_matrix = (root == NULL) ? &identity : root;

  // Applies hierarchical transformation.
  // Loop ends after "to".
  const int end = math::Min(to + 1, skeleton->num_joints());
  // Begins iteration from "from", or the next joint if "from" is excluded.
  // Process next joint if end is not reach. parents[begin] >= from is true as
  // long as "begin" is a child of "from".
  for (int i = math::Max(from + from_excluded, 0),
           process = i < end && (!from_excluded || parents[i] >= from);
       process;) {
    // Builds soa matrices from soa transforms.
    const math::SoaTransform& transform = input.begin[i / 4];
    const math::SoaFloat4x4 local_soa_matrices = math::SoaFloat4x4::FromAffine(
        transform.translation, transform.rotation, transform.scale);

    // Converts to aos matrices.
    math::Float4x4 local_aos_matrices[4];
    math::Transpose16x16(&local_soa_matrices.cols[0].x,
                         local_aos_matrices->cols);

    // parents[i] >= from is true as long as "i" is a child of "from".
    for (const int soa_end = (i + 4) & ~3; i < soa_end && process;
         ++i, process = i < end && parents[i] >= from) {
      const int parent = parents[i];
      const math::Float4x4* parent_matrix =
          parent == Skeleton::kNoParent ? root_matrix : &output[parent];
      output[i] = *parent_matrix * local_aos_matrices[i & 3];
    }
  }
  return true;
}
}  // namespace animation
}  // namespace ozz

// Including sampling_job.cc file.

//----------------------------------------------------------------------------//
//                                                                            //
// ozz-animation is hosted at http://github.com/guillaumeblanc/ozz-animation  //
// and distributed under the MIT License (MIT).                               //
//                                                                            //
// Copyright (c) 2019 Guillaume Blanc                                         //
//                                                                            //
// Permission is hereby granted, free of charge, to any person obtaining a    //
// copy of this software and associated documentation files (the "Software"), //
// to deal in the Software without restriction, including without limitation  //
// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //
// and/or sell copies of the Software, and to permit persons to whom the      //
// Software is furnished to do so, subject to the following conditions:       //
//                                                                            //
// The above copyright notice and this permission notice shall be included in //
// all copies or substantial portions of the Software.                        //
//                                                                            //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    //
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    //
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        //
// DEALINGS IN THE SOFTWARE.                                                  //
//                                                                            //
//----------------------------------------------------------------------------//

#include "ozz/animation/runtime/sampling_job.h"

#include <cassert>

#include "ozz/animation/runtime/animation.h"
#include "ozz/base/maths/math_constant.h"
#include "ozz/base/maths/math_ex.h"
#include "ozz/base/maths/soa_transform.h"
#include "ozz/base/memory/allocator.h"

// Internal include file
#define OZZ_INCLUDE_PRIVATE_HEADER  // Allows to include private headers.

// Includes internal include file animation/runtime/animation_keyframe.h

//----------------------------------------------------------------------------//
//                                                                            //
// ozz-animation is hosted at http://github.com/guillaumeblanc/ozz-animation  //
// and distributed under the MIT License (MIT).                               //
//                                                                            //
// Copyright (c) 2019 Guillaume Blanc                                         //
//                                                                            //
// Permission is hereby granted, free of charge, to any person obtaining a    //
// copy of this software and associated documentation files (the "Software"), //
// to deal in the Software without restriction, including without limitation  //
// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //
// and/or sell copies of the Software, and to permit persons to whom the      //
// Software is furnished to do so, subject to the following conditions:       //
//                                                                            //
// The above copyright notice and this permission notice shall be included in //
// all copies or substantial portions of the Software.                        //
//                                                                            //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    //
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    //
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        //
// DEALINGS IN THE SOFTWARE.                                                  //
//                                                                            //
//----------------------------------------------------------------------------//

#ifndef OZZ_ANIMATION_RUNTIME_ANIMATION_KEYFRAME_H_
#define OZZ_ANIMATION_RUNTIME_ANIMATION_KEYFRAME_H_

#ifndef OZZ_INCLUDE_PRIVATE_HEADER
#error "This header is private, it cannot be included from public headers."
#endif  // OZZ_INCLUDE_PRIVATE_HEADER

namespace ozz {
namespace animation {

// Define animation key frame types (translation, rotation, scale). Every type
// as the same base made of the key time ratio and it's track index. This is
// required as key frames are not sorted per track, but sorted by ratio to favor
// cache coherency. Key frame values are compressed, according on their type.
// Decompression is efficient because it's done on SoA data and cached during
// sampling.

// Defines the translation key frame type.
// Translation values are stored as half precision floats with 16 bits per
// component.
struct TranslationKey {
  float ratio;
  uint16_t track;
  uint16_t value[3];
};

// Defines the rotation key frame type.
// Rotation value is a quaternion. Quaternion are normalized, which means each
// component is in range [0:1]. This property allows to quantize the 3
// components to 3 signed integer 16 bits values. The 4th component is restored
// at runtime, using the knowledge that |w| = sqrt(1 - (a^2 + b^2 + c^2)).
// The sign of this 4th component is stored using 1 bit taken from the track
// member.
//
// In more details, compression algorithm stores the 3 smallest components of
// the quaternion and restores the largest. The 3 smallest can be pre-multiplied
// by sqrt(2) to gain some precision indeed.
//
// Quantization could be reduced to 11-11-10 bits as often used for animation
// key frames, but in this case RotationKey structure would induce 16 bits of
// padding.
struct RotationKey {
  float ratio;
  uint16_t track : 13;   // The track this key frame belongs to.
  uint16_t largest : 2;  // The largest component of the quaternion.
  uint16_t sign : 1;     // The sign of the largest component. 1 for negative.
  int16_t value[3];      // The quantized value of the 3 smallest components.
};

// Defines the scale key frame type.
// Scale values are stored as half precision floats with 16 bits per
// component.
struct ScaleKey {
  float ratio;
  uint16_t track;
  uint16_t value[3];
};
}  // namespace animation
}  // namespace ozz
#endif  // OZZ_ANIMATION_RUNTIME_ANIMATION_KEYFRAME_H_


namespace ozz {
namespace animation {

namespace internal {
struct InterpSoaTranslation {
  math::SimdFloat4 ratio[2];
  math::SoaFloat3 value[2];
};
struct InterpSoaRotation {
  math::SimdFloat4 ratio[2];
  math::SoaQuaternion value[2];
};
struct InterpSoaScale {
  math::SimdFloat4 ratio[2];
  math::SoaFloat3 value[2];
};
}  // namespace internal

bool SamplingJob::Validate() const {
  // Don't need any early out, as jobs are valid in most of the performance
  // critical cases.
  // Tests are written in multiple lines in order to avoid branches.
  bool valid = true;

  // Test for NULL pointers.
  if (!animation || !cache) {
    return false;
  }
  valid &= output.begin != NULL;

  // Tests output range, implicitly tests output.end != NULL.
  const ptrdiff_t num_soa_tracks = animation->num_soa_tracks();
  valid &= output.end - output.begin >= num_soa_tracks;

  // Tests cache size.
  valid &= cache->max_soa_tracks() >= num_soa_tracks;

  return valid;
}

namespace {
// Loops through the sorted key frames and update cache structure.
template <typename _Key>
void UpdateKeys(float _ratio, int _num_soa_tracks, ozz::Range<const _Key> _keys,
                int* _cursor, int* _cache, unsigned char* _outdated) {
  assert(_num_soa_tracks >= 1);
  const int num_tracks = _num_soa_tracks * 4;
  assert(_keys.begin + num_tracks * 2 <= _keys.end);

  const _Key* cursor = &_keys.begin[*_cursor];
  if (!*_cursor) {
    // Initializes interpolated entries with the first 2 sets of key frames.
    // The sorting algorithm ensures that the first 2 key frames of a track
    // are consecutive.
    for (int i = 0; i < _num_soa_tracks; ++i) {
      const int in_index0 = i * 4;                   // * soa size
      const int in_index1 = in_index0 + num_tracks;  // 2nd row.
      const int out_index = i * 4 * 2;
      _cache[out_index + 0] = in_index0 + 0;
      _cache[out_index + 1] = in_index1 + 0;
      _cache[out_index + 2] = in_index0 + 1;
      _cache[out_index + 3] = in_index1 + 1;
      _cache[out_index + 4] = in_index0 + 2;
      _cache[out_index + 5] = in_index1 + 2;
      _cache[out_index + 6] = in_index0 + 3;
      _cache[out_index + 7] = in_index1 + 3;
    }
    cursor = _keys.begin + num_tracks * 2;  // New cursor position.

    // All entries are outdated. It cares to only flag valid soa entries as
    // this is the exit condition of other algorithms.
    const int num_outdated_flags = (_num_soa_tracks + 7) / 8;
    for (int i = 0; i < num_outdated_flags - 1; ++i) {
      _outdated[i] = 0xff;
    }
    _outdated[num_outdated_flags - 1] =
        0xff >> (num_outdated_flags * 8 - _num_soa_tracks);
  } else {
    assert(cursor >= _keys.begin + num_tracks * 2 && cursor <= _keys.end);
  }

  // Search for the keys that matches _ratio.
  // Iterates while the cache is not updated with left and right keys required
  // for interpolation at time ratio _ratio, for all tracks. Thanks to the
  // keyframe sorting, the loop can end as soon as it finds a key greater that
  // _ratio. It will mean that all the keys lower than _ratio have been
  // processed, meaning all cache entries are up to date.
  while (cursor < _keys.end &&
         _keys.begin[_cache[cursor->track * 2 + 1]].ratio <= _ratio) {
    // Flag this soa entry as outdated.
    _outdated[cursor->track / 32] |= (1 << ((cursor->track & 0x1f) / 4));
    // Updates cache.
    const int base = cursor->track * 2;
    _cache[base] = _cache[base + 1];
    _cache[base + 1] = static_cast<int>(cursor - _keys.begin);
    // Process next key.
    ++cursor;
  }
  assert(cursor <= _keys.end);

  // Updates cursor output.
  *_cursor = static_cast<int>(cursor - _keys.begin);
}

void UpdateSoaTranslations(int _num_soa_tracks,
                           ozz::Range<const TranslationKey> _keys,
                           const int* _interp, uint8_t* _outdated,
                           internal::InterpSoaTranslation* soa_translations_) {
  const int num_outdated_flags = (_num_soa_tracks + 7) / 8;
  for (int j = 0; j < num_outdated_flags; ++j) {
    uint8_t outdated = _outdated[j];
    _outdated[j] = 0;  // Reset outdated entries as all will be processed.
    for (int i = j * 8; outdated; ++i, outdated >>= 1) {
      if (!(outdated & 1)) {
        continue;
      }
      const int base = i * 4 * 2;  // * soa size * 2 keys

      // Decompress left side keyframes and store them in soa structures.
      const TranslationKey& k00 = _keys.begin[_interp[base + 0]];
      const TranslationKey& k10 = _keys.begin[_interp[base + 2]];
      const TranslationKey& k20 = _keys.begin[_interp[base + 4]];
      const TranslationKey& k30 = _keys.begin[_interp[base + 6]];
      soa_translations_[i].ratio[0] =
          math::simd_float4::Load(k00.ratio, k10.ratio, k20.ratio, k30.ratio);
      soa_translations_[i].value[0].x = math::HalfToFloat(math::simd_int4::Load(
          k00.value[0], k10.value[0], k20.value[0], k30.value[0]));
      soa_translations_[i].value[0].y = math::HalfToFloat(math::simd_int4::Load(
          k00.value[1], k10.value[1], k20.value[1], k30.value[1]));
      soa_translations_[i].value[0].z = math::HalfToFloat(math::simd_int4::Load(
          k00.value[2], k10.value[2], k20.value[2], k30.value[2]));

      // Decompress right side keyframes and store them in soa structures.
      const TranslationKey& k01 = _keys.begin[_interp[base + 1]];
      const TranslationKey& k11 = _keys.begin[_interp[base + 3]];
      const TranslationKey& k21 = _keys.begin[_interp[base + 5]];
      const TranslationKey& k31 = _keys.begin[_interp[base + 7]];
      soa_translations_[i].ratio[1] =
          math::simd_float4::Load(k01.ratio, k11.ratio, k21.ratio, k31.ratio);
      soa_translations_[i].value[1].x = math::HalfToFloat(math::simd_int4::Load(
          k01.value[0], k11.value[0], k21.value[0], k31.value[0]));
      soa_translations_[i].value[1].y = math::HalfToFloat(math::simd_int4::Load(
          k01.value[1], k11.value[1], k21.value[1], k31.value[1]));
      soa_translations_[i].value[1].z = math::HalfToFloat(math::simd_int4::Load(
          k01.value[2], k11.value[2], k21.value[2], k31.value[2]));
    }
  }
}

#define DECOMPRESS_SOA_QUAT(_k0, _k1, _k2, _k3, _quat)                         \
  do {                                                                         \
    /* Selects proper mapping for each key.*/                                  \
    const int* m0 = kCpntMapping[_k0.largest];                                 \
    const int* m1 = kCpntMapping[_k1.largest];                                 \
    const int* m2 = kCpntMapping[_k2.largest];                                 \
    const int* m3 = kCpntMapping[_k3.largest];                                 \
                                                                               \
    /* Prepares an array of input values, according to the mapping required */ \
    /* to restore quaternion largest component.*/                              \
    OZZ_ALIGN(16)                                                              \
    int cmp_keys[4][4] = {                                                     \
        {_k0.value[m0[0]], _k1.value[m1[0]], _k2.value[m2[0]],                 \
         _k3.value[m3[0]]},                                                    \
        {_k0.value[m0[1]], _k1.value[m1[1]], _k2.value[m2[1]],                 \
         _k3.value[m3[1]]},                                                    \
        {_k0.value[m0[2]], _k1.value[m1[2]], _k2.value[m2[2]],                 \
         _k3.value[m3[2]]},                                                    \
        {_k0.value[m0[3]], _k1.value[m1[3]], _k2.value[m2[3]],                 \
         _k3.value[m3[3]]},                                                    \
    };                                                                         \
                                                                               \
    /* Resets largest component to 0.*/                                        \
    cmp_keys[_k0.largest][0] = 0;                                              \
    cmp_keys[_k1.largest][1] = 0;                                              \
    cmp_keys[_k2.largest][2] = 0;                                              \
    cmp_keys[_k3.largest][3] = 0;                                              \
                                                                               \
    /* Rebuilds quaternion from quantized values.*/                            \
    math::SimdFloat4 cpnt[4] = {                                               \
        kInt2Float *                                                           \
            math::simd_float4::FromInt(math::simd_int4::LoadPtr(cmp_keys[0])), \
        kInt2Float *                                                           \
            math::simd_float4::FromInt(math::simd_int4::LoadPtr(cmp_keys[1])), \
        kInt2Float *                                                           \
            math::simd_float4::FromInt(math::simd_int4::LoadPtr(cmp_keys[2])), \
        kInt2Float *                                                           \
            math::simd_float4::FromInt(math::simd_int4::LoadPtr(cmp_keys[3])), \
    };                                                                         \
                                                                               \
    /* Get back length of 4th component. Favors performance over accuracy by*/ \
    /* using x * RSqrtEst(x) instead of Sqrt(x).*/                             \
    /* ww0 cannot be 0 because we 're recomputing the largest component.*/     \
    const math::SimdFloat4 dot = cpnt[0] * cpnt[0] + cpnt[1] * cpnt[1] +       \
                                 cpnt[2] * cpnt[2] + cpnt[3] * cpnt[3];        \
    const math::SimdFloat4 ww0 = math::Max(eps, one - dot);                    \
    const math::SimdFloat4 w0 = ww0 * math::RSqrtEst(ww0);                     \
    /* Re-applies 4th component' s sign.*/                                     \
    const math::SimdInt4 sign = math::ShiftL(                                  \
        math::simd_int4::Load(_k0.sign, _k1.sign, _k2.sign, _k3.sign), 31);    \
    const math::SimdFloat4 restored = math::Or(w0, sign);                      \
                                                                               \
    /* Re-injects the largest component inside the SoA structure.*/            \
    cpnt[_k0.largest] =                                                        \
        math::Or(cpnt[_k0.largest], math::And(restored, mf000));               \
    cpnt[_k1.largest] =                                                        \
        math::Or(cpnt[_k1.largest], math::And(restored, m0f00));               \
    cpnt[_k2.largest] =                                                        \
        math::Or(cpnt[_k2.largest], math::And(restored, m00f0));               \
    cpnt[_k3.largest] =                                                        \
        math::Or(cpnt[_k3.largest], math::And(restored, m000f));               \
                                                                               \
    /* Stores result.*/                                                        \
    _quat.x = cpnt[0];                                                         \
    _quat.y = cpnt[1];                                                         \
    _quat.z = cpnt[2];                                                         \
    _quat.w = cpnt[3];                                                         \
  } while (void(0), 0)

void UpdateSoaRotations(int _num_soa_tracks,
                        ozz::Range<const RotationKey> _keys, const int* _interp,
                        uint8_t* _outdated,
                        internal::InterpSoaRotation* _soa_rotations) {
  // Prepares constants.
  const math::SimdFloat4 one = math::simd_float4::one();
  const math::SimdFloat4 eps = math::simd_float4::Load1(1e-16f);
  const math::SimdFloat4 kInt2Float =
      math::simd_float4::Load1(1.f / (32767.f * math::kSqrt2));
  const math::SimdInt4 mf000 = math::simd_int4::mask_f000();
  const math::SimdInt4 m0f00 = math::simd_int4::mask_0f00();
  const math::SimdInt4 m00f0 = math::simd_int4::mask_00f0();
  const math::SimdInt4 m000f = math::simd_int4::mask_000f();

  // Defines a mapping table that defines components assignation in the output
  // quaternion.
  const int kCpntMapping[4][4] = {
      {0, 0, 1, 2}, {0, 0, 1, 2}, {0, 1, 0, 2}, {0, 1, 2, 0}};

  const int num_outdated_flags = (_num_soa_tracks + 7) / 8;
  for (int j = 0; j < num_outdated_flags; ++j) {
    uint8_t outdated = _outdated[j];
    _outdated[j] = 0;  // Reset outdated entries as all will be processed.
    for (int i = j * 8; outdated; ++i, outdated >>= 1) {
      if (!(outdated & 1)) {
        continue;
      }

      const int base = i * 4 * 2;  // * soa size * 2 keys per track

      // Decompress left side keyframes and store them in soa structures.
      {
        const RotationKey& k0 = _keys.begin[_interp[base + 0]];
        const RotationKey& k1 = _keys.begin[_interp[base + 2]];
        const RotationKey& k2 = _keys.begin[_interp[base + 4]];
        const RotationKey& k3 = _keys.begin[_interp[base + 6]];

        _soa_rotations[i].ratio[0] =
            math::simd_float4::Load(k0.ratio, k1.ratio, k2.ratio, k3.ratio);
        math::SoaQuaternion& quat = _soa_rotations[i].value[0];
        DECOMPRESS_SOA_QUAT(k0, k1, k2, k3, quat);
      }

      // Decompress right side keyframes and store them in soa structures.
      {
        const RotationKey& k0 = _keys.begin[_interp[base + 1]];
        const RotationKey& k1 = _keys.begin[_interp[base + 3]];
        const RotationKey& k2 = _keys.begin[_interp[base + 5]];
        const RotationKey& k3 = _keys.begin[_interp[base + 7]];

        _soa_rotations[i].ratio[1] =
            math::simd_float4::Load(k0.ratio, k1.ratio, k2.ratio, k3.ratio);
        math::SoaQuaternion& quat = _soa_rotations[i].value[1];
        DECOMPRESS_SOA_QUAT(k0, k1, k2, k3, quat);
      }
    }
  }
}

#undef DECOMPRESS_SOA_QUAT

void UpdateSoaScales(int _num_soa_tracks, ozz::Range<const ScaleKey> _keys,
                     const int* _interp, uint8_t* _outdated,
                     internal::InterpSoaScale* soa_scales_) {
  const int num_outdated_flags = (_num_soa_tracks + 7) / 8;
  for (int j = 0; j < num_outdated_flags; ++j) {
    uint8_t outdated = _outdated[j];
    _outdated[j] = 0;  // Reset outdated entries as all will be processed.
    for (int i = j * 8; outdated; ++i, outdated >>= 1) {
      if (!(outdated & 1)) {
        continue;
      }
      const int base = i * 4 * 2;  // * soa size * 2 keys

      // Decompress left side keyframes and store them in soa structures.
      const ScaleKey& k00 = _keys.begin[_interp[base + 0]];
      const ScaleKey& k10 = _keys.begin[_interp[base + 2]];
      const ScaleKey& k20 = _keys.begin[_interp[base + 4]];
      const ScaleKey& k30 = _keys.begin[_interp[base + 6]];
      soa_scales_[i].ratio[0] =
          math::simd_float4::Load(k00.ratio, k10.ratio, k20.ratio, k30.ratio);
      soa_scales_[i].value[0].x = math::HalfToFloat(math::simd_int4::Load(
          k00.value[0], k10.value[0], k20.value[0], k30.value[0]));
      soa_scales_[i].value[0].y = math::HalfToFloat(math::simd_int4::Load(
          k00.value[1], k10.value[1], k20.value[1], k30.value[1]));
      soa_scales_[i].value[0].z = math::HalfToFloat(math::simd_int4::Load(
          k00.value[2], k10.value[2], k20.value[2], k30.value[2]));

      // Decompress right side keyframes and store them in soa structures.
      const ScaleKey& k01 = _keys.begin[_interp[base + 1]];
      const ScaleKey& k11 = _keys.begin[_interp[base + 3]];
      const ScaleKey& k21 = _keys.begin[_interp[base + 5]];
      const ScaleKey& k31 = _keys.begin[_interp[base + 7]];
      soa_scales_[i].ratio[1] =
          math::simd_float4::Load(k01.ratio, k11.ratio, k21.ratio, k31.ratio);
      soa_scales_[i].value[1].x = math::HalfToFloat(math::simd_int4::Load(
          k01.value[0], k11.value[0], k21.value[0], k31.value[0]));
      soa_scales_[i].value[1].y = math::HalfToFloat(math::simd_int4::Load(
          k01.value[1], k11.value[1], k21.value[1], k31.value[1]));
      soa_scales_[i].value[1].z = math::HalfToFloat(math::simd_int4::Load(
          k01.value[2], k11.value[2], k21.value[2], k31.value[2]));
    }
  }
}

void Interpolates(float _anim_ratio, int _num_soa_tracks,
                  const internal::InterpSoaTranslation* _translations,
                  const internal::InterpSoaRotation* _rotations,
                  const internal::InterpSoaScale* _scales,
                  math::SoaTransform* _output) {
  const math::SimdFloat4 anim_ratio = math::simd_float4::Load1(_anim_ratio);
  for (int i = 0; i < _num_soa_tracks; ++i) {
    // Prepares interpolation coefficients.
    const math::SimdFloat4 interp_t_ratio =
        (anim_ratio - _translations[i].ratio[0]) *
        math::RcpEst(_translations[i].ratio[1] - _translations[i].ratio[0]);
    const math::SimdFloat4 interp_r_ratio =
        (anim_ratio - _rotations[i].ratio[0]) *
        math::RcpEst(_rotations[i].ratio[1] - _rotations[i].ratio[0]);
    const math::SimdFloat4 interp_s_ratio =
        (anim_ratio - _scales[i].ratio[0]) *
        math::RcpEst(_scales[i].ratio[1] - _scales[i].ratio[0]);

    // Processes interpolations.
    // The lerp of the rotation uses the shortest path, because opposed
    // quaternions were negated during animation build stage (AnimationBuilder).
    _output[i].translation = Lerp(_translations[i].value[0],
                                  _translations[i].value[1], interp_t_ratio);
    _output[i].rotation = NLerpEst(_rotations[i].value[0],
                                   _rotations[i].value[1], interp_r_ratio);
    _output[i].scale =
        Lerp(_scales[i].value[0], _scales[i].value[1], interp_s_ratio);
  }
}
}  // namespace

SamplingJob::SamplingJob() : ratio(0.f), animation(NULL), cache(NULL) {}

bool SamplingJob::Run() const {
  if (!Validate()) {
    return false;
  }

  const int num_soa_tracks = animation->num_soa_tracks();
  if (num_soa_tracks == 0) {  // Early out if animation contains no joint.
    return true;
  }

  // Clamps ratio in range [0,duration].
  const float anim_ratio = math::Clamp(0.f, ratio, 1.f);

  // Step the cache to this potentially new animation and ratio.
  assert(cache->max_soa_tracks() >= num_soa_tracks);
  cache->Step(*animation, anim_ratio);

  // Fetch key frames from the animation to the cache a r = anim_ratio.
  // Then updates outdated soa hot values.
  UpdateKeys(anim_ratio, num_soa_tracks, animation->translations(),
             &cache->translation_cursor_, cache->translation_keys_,
             cache->outdated_translations_);
  UpdateSoaTranslations(num_soa_tracks, animation->translations(),
                        cache->translation_keys_, cache->outdated_translations_,
                        cache->soa_translations_);

  UpdateKeys(anim_ratio, num_soa_tracks, animation->rotations(),
             &cache->rotation_cursor_, cache->rotation_keys_,
             cache->outdated_rotations_);
  UpdateSoaRotations(num_soa_tracks, animation->rotations(),
                     cache->rotation_keys_, cache->outdated_rotations_,
                     cache->soa_rotations_);

  UpdateKeys(anim_ratio, num_soa_tracks, animation->scales(),
             &cache->scale_cursor_, cache->scale_keys_,
             cache->outdated_scales_);
  UpdateSoaScales(num_soa_tracks, animation->scales(), cache->scale_keys_,
                  cache->outdated_scales_, cache->soa_scales_);

  // Interpolates soa hot data.
  Interpolates(anim_ratio, num_soa_tracks, cache->soa_translations_,
               cache->soa_rotations_, cache->soa_scales_, output.begin);

  return true;
}

SamplingCache::SamplingCache()
    : max_soa_tracks_(0),
      soa_translations_(NULL) {  // soa_translations_ is the allocation pointer.
  Invalidate();
}

SamplingCache::SamplingCache(int _max_tracks)
    : max_soa_tracks_(0),
      soa_translations_(NULL) {  // soa_translations_ is the allocation pointer.
  Resize(_max_tracks);
}

SamplingCache::~SamplingCache() {
  // Deallocates everything at once.
  memory::default_allocator()->Deallocate(soa_translations_);
}

void SamplingCache::Resize(int _max_tracks) {
  using internal::InterpSoaRotation;
  using internal::InterpSoaScale;
  using internal::InterpSoaTranslation;

  // Reset existing data.
  Invalidate();
  memory::default_allocator()->Deallocate(soa_translations_);

  // Updates maximum supported soa tracks.
  max_soa_tracks_ = (_max_tracks + 3) / 4;

  // Allocate all cache data at once in a single allocation.
  // Alignment is guaranteed because memory is dispatch from the highest
  // alignment requirement (Soa data: SimdFloat4) to the lowest (outdated
  // flag: unsigned char).

  // Computes allocation size.
  const size_t max_tracks = max_soa_tracks_ * 4;
  const size_t num_outdated = (max_soa_tracks_ + 7) / 8;
  const size_t size =
      sizeof(InterpSoaTranslation) * max_soa_tracks_ +
      sizeof(InterpSoaRotation) * max_soa_tracks_ +
      sizeof(InterpSoaScale) * max_soa_tracks_ +
      sizeof(int) * max_tracks * 2 * 3 +  // 2 keys * (trans + rot + scale).
      sizeof(uint8_t) * 3 * num_outdated;

  // Allocates all at once.
  memory::Allocator* allocator = memory::default_allocator();
  char* alloc_begin = reinterpret_cast<char*>(
      allocator->Allocate(size, OZZ_ALIGN_OF(InterpSoaTranslation)));
  char* alloc_cursor = alloc_begin;

  // Distributes buffer memory while ensuring proper alignment (serves larger
  // alignment values first).
  OZZ_STATIC_ASSERT(
      OZZ_ALIGN_OF(InterpSoaTranslation) >= OZZ_ALIGN_OF(InterpSoaRotation) &&
      OZZ_ALIGN_OF(InterpSoaRotation) >= OZZ_ALIGN_OF(InterpSoaScale) &&
      OZZ_ALIGN_OF(InterpSoaScale) >= OZZ_ALIGN_OF(int) &&
      OZZ_ALIGN_OF(int) >= OZZ_ALIGN_OF(uint8_t));

  soa_translations_ = reinterpret_cast<InterpSoaTranslation*>(alloc_cursor);
  assert(
      math::IsAligned(soa_translations_, OZZ_ALIGN_OF(InterpSoaTranslation)));
  alloc_cursor += sizeof(InterpSoaTranslation) * max_soa_tracks_;
  soa_rotations_ = reinterpret_cast<InterpSoaRotation*>(alloc_cursor);
  assert(math::IsAligned(soa_rotations_, OZZ_ALIGN_OF(InterpSoaRotation)));
  alloc_cursor += sizeof(InterpSoaRotation) * max_soa_tracks_;
  soa_scales_ = reinterpret_cast<InterpSoaScale*>(alloc_cursor);
  assert(math::IsAligned(soa_scales_, OZZ_ALIGN_OF(InterpSoaScale)));
  alloc_cursor += sizeof(InterpSoaScale) * max_soa_tracks_;

  translation_keys_ = reinterpret_cast<int*>(alloc_cursor);
  assert(math::IsAligned(translation_keys_, OZZ_ALIGN_OF(int)));
  alloc_cursor += sizeof(int) * max_tracks * 2;
  rotation_keys_ = reinterpret_cast<int*>(alloc_cursor);
  alloc_cursor += sizeof(int) * max_tracks * 2;
  scale_keys_ = reinterpret_cast<int*>(alloc_cursor);
  alloc_cursor += sizeof(int) * max_tracks * 2;

  outdated_translations_ = reinterpret_cast<uint8_t*>(alloc_cursor);
  assert(math::IsAligned(outdated_translations_, OZZ_ALIGN_OF(uint8_t)));
  alloc_cursor += sizeof(uint8_t) * num_outdated;
  outdated_rotations_ = reinterpret_cast<uint8_t*>(alloc_cursor);
  alloc_cursor += sizeof(uint8_t) * num_outdated;
  outdated_scales_ = reinterpret_cast<uint8_t*>(alloc_cursor);
  alloc_cursor += sizeof(uint8_t) * num_outdated;

  assert(alloc_cursor == alloc_begin + size);
}

void SamplingCache::Step(const Animation& _animation, float _ratio) {
  // The cache is invalidated if animation has changed or if it is being rewind.
  if (animation_ != &_animation || _ratio < ratio_) {
    animation_ = &_animation;
    translation_cursor_ = 0;
    rotation_cursor_ = 0;
    scale_cursor_ = 0;
  }
  ratio_ = _ratio;
}

void SamplingCache::Invalidate() {
  animation_ = NULL;
  ratio_ = 0.f;
  translation_cursor_ = 0;
  rotation_cursor_ = 0;
  scale_cursor_ = 0;
}
}  // namespace animation
}  // namespace ozz

// Including skeleton.cc file.

//----------------------------------------------------------------------------//
//                                                                            //
// ozz-animation is hosted at http://github.com/guillaumeblanc/ozz-animation  //
// and distributed under the MIT License (MIT).                               //
//                                                                            //
// Copyright (c) 2019 Guillaume Blanc                                         //
//                                                                            //
// Permission is hereby granted, free of charge, to any person obtaining a    //
// copy of this software and associated documentation files (the "Software"), //
// to deal in the Software without restriction, including without limitation  //
// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //
// and/or sell copies of the Software, and to permit persons to whom the      //
// Software is furnished to do so, subject to the following conditions:       //
//                                                                            //
// The above copyright notice and this permission notice shall be included in //
// all copies or substantial portions of the Software.                        //
//                                                                            //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    //
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    //
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        //
// DEALINGS IN THE SOFTWARE.                                                  //
//                                                                            //
//----------------------------------------------------------------------------//

#include "ozz/animation/runtime/skeleton.h"

#include <cstring>

#include "ozz/base/io/archive.h"
#include "ozz/base/log.h"
#include "ozz/base/maths/math_ex.h"
#include "ozz/base/maths/soa_math_archive.h"
#include "ozz/base/maths/soa_transform.h"
#include "ozz/base/memory/allocator.h"

namespace ozz {
namespace animation {

Skeleton::Skeleton() {}

Skeleton::~Skeleton() { Deallocate(); }

char* Skeleton::Allocate(size_t _chars_size, size_t _num_joints) {
  // Distributes buffer memory while ensuring proper alignment (serves larger
  // alignment values first).
  OZZ_STATIC_ASSERT(OZZ_ALIGN_OF(math::SoaTransform) >= OZZ_ALIGN_OF(char*) &&
                    OZZ_ALIGN_OF(char*) >= OZZ_ALIGN_OF(int16_t) &&
                    OZZ_ALIGN_OF(int16_t) >= OZZ_ALIGN_OF(char));

  assert(joint_bind_poses_.size() == 0 && joint_names_.size() == 0 &&
         joint_parents_.size() == 0);

  // Early out if no joint.
  if (_num_joints == 0) {
    return NULL;
  }

  // Bind poses have SoA format
  const size_t joint_bind_poses_size =
      (_num_joints + 3) / 4 * sizeof(math::SoaTransform);
  const size_t names_size = _num_joints * sizeof(char*);
  const size_t joint_parents_size = _num_joints * sizeof(int16_t);
  const size_t buffer_size =
      names_size + _chars_size + joint_parents_size + joint_bind_poses_size;

  // Allocates whole buffer.
  char* buffer = reinterpret_cast<char*>(memory::default_allocator()->Allocate(
      buffer_size, OZZ_ALIGN_OF(math::SoaTransform)));

  // Serves larger alignment values first.
  // Bind pose first, biggest alignment.
  joint_bind_poses_.begin = reinterpret_cast<math::SoaTransform*>(buffer);
  assert(math::IsAligned(joint_bind_poses_.begin,
                         OZZ_ALIGN_OF(math::SoaTransform)));
  buffer += joint_bind_poses_size;
  joint_bind_poses_.end = reinterpret_cast<math::SoaTransform*>(buffer);

  // Then names array, second biggest alignment.
  joint_names_.begin = reinterpret_cast<char**>(buffer);
  assert(math::IsAligned(joint_names_.begin, OZZ_ALIGN_OF(char**)));
  buffer += names_size;
  joint_names_.end = reinterpret_cast<char**>(buffer);

  // Parents, third biggest alignment.
  joint_parents_.begin = reinterpret_cast<int16_t*>(buffer);
  assert(math::IsAligned(joint_parents_.begin, OZZ_ALIGN_OF(int16_t)));
  buffer += joint_parents_size;
  joint_parents_.end = reinterpret_cast<int16_t*>(buffer);

  // Remaning buffer will be used to store joint names.
  return buffer;
}

void Skeleton::Deallocate() {
  memory::default_allocator()->Deallocate(joint_bind_poses_.begin);
  joint_bind_poses_.Clear();
  joint_names_.Clear();
  joint_parents_.Clear();
}

void Skeleton::Save(ozz::io::OArchive& _archive) const {
  const int32_t num_joints = this->num_joints();

  // Early out if skeleton's empty.
  _archive << num_joints;
  if (!num_joints) {
    return;
  }

  // Stores names. They are all concatenated in the same buffer, starting at
  // joint_names_[0].
  size_t chars_count = 0;
  for (int i = 0; i < num_joints; ++i) {
    chars_count += (std::strlen(joint_names_[i]) + 1) * sizeof(char);
  }
  _archive << static_cast<int32_t>(chars_count);
  _archive << ozz::io::MakeArray(joint_names_[0], chars_count);
  _archive << ozz::io::MakeArray(joint_parents_);
  _archive << ozz::io::MakeArray(joint_bind_poses_);
}

void Skeleton::Load(ozz::io::IArchive& _archive, uint32_t _version) {
  // Deallocate skeleton in case it was already used before.
  Deallocate();

  if (_version != 2) {
    log::Err() << "Unsupported Skeleton version " << _version << "."
               << std::endl;
    return;
  }

  int32_t num_joints;
  _archive >> num_joints;

  // Early out if skeleton's empty.
  if (!num_joints) {
    return;
  }

  // Read names.
  int32_t chars_count;
  _archive >> chars_count;

  // Allocates all skeleton data members.
  char* cursor = Allocate(chars_count, num_joints);

  // Reads name's buffer, they are all contiguous in the same buffer.
  _archive >> ozz::io::MakeArray(cursor, chars_count);

  // Fixes up array of pointers. Stops at num_joints - 1, so that it doesn't
  // read memory past the end of the buffer.
  for (int i = 0; i < num_joints - 1; ++i) {
    joint_names_[i] = cursor;
    cursor += std::strlen(joint_names_[i]) + 1;
  }
  // num_joints is > 0, as this was tested at the beginning of the function.
  joint_names_[num_joints - 1] = cursor;

  _archive >> ozz::io::MakeArray(joint_parents_);
  _archive >> ozz::io::MakeArray(joint_bind_poses_);
}
}  // namespace animation
}  // namespace ozz

// Including skeleton_utils.cc file.

//----------------------------------------------------------------------------//
//                                                                            //
// ozz-animation is hosted at http://github.com/guillaumeblanc/ozz-animation  //
// and distributed under the MIT License (MIT).                               //
//                                                                            //
// Copyright (c) 2019 Guillaume Blanc                                         //
//                                                                            //
// Permission is hereby granted, free of charge, to any person obtaining a    //
// copy of this software and associated documentation files (the "Software"), //
// to deal in the Software without restriction, including without limitation  //
// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //
// and/or sell copies of the Software, and to permit persons to whom the      //
// Software is furnished to do so, subject to the following conditions:       //
//                                                                            //
// The above copyright notice and this permission notice shall be included in //
// all copies or substantial portions of the Software.                        //
//                                                                            //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    //
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    //
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        //
// DEALINGS IN THE SOFTWARE.                                                  //
//                                                                            //
//----------------------------------------------------------------------------//

#include "ozz/animation/runtime/skeleton_utils.h"

#include "ozz/base/maths/soa_transform.h"

#include <assert.h>

namespace ozz {
namespace animation {

// Unpacks skeleton bind pose stored in soa format by the skeleton.
ozz::math::Transform GetJointLocalBindPose(const Skeleton& _skeleton,
                                           int _joint) {
  assert(_joint >= 0 && _joint < _skeleton.num_joints() &&
         "Joint index out of range.");

  const ozz::math::SoaTransform& soa_transform =
      _skeleton.joint_bind_poses()[_joint / 4];

  // Transpose SoA data to AoS.
  ozz::math::SimdFloat4 translations[4];
  ozz::math::Transpose3x4(&soa_transform.translation.x, translations);
  ozz::math::SimdFloat4 rotations[4];
  ozz::math::Transpose4x4(&soa_transform.rotation.x, rotations);
  ozz::math::SimdFloat4 scales[4];
  ozz::math::Transpose3x4(&soa_transform.scale.x, scales);

  // Stores to the Transform object.
  math::Transform bind_pose;
  const int offset = _joint % 4;
  ozz::math::Store3PtrU(translations[offset], &bind_pose.translation.x);
  ozz::math::StorePtrU(rotations[offset], &bind_pose.rotation.x);
  ozz::math::Store3PtrU(scales[offset], &bind_pose.scale.x);

  return bind_pose;
}
}  // namespace animation
}  // namespace ozz

// Including track.cc file.

//----------------------------------------------------------------------------//
//                                                                            //
// ozz-animation is hosted at http://github.com/guillaumeblanc/ozz-animation  //
// and distributed under the MIT License (MIT).                               //
//                                                                            //
// Copyright (c) 2019 Guillaume Blanc                                         //
//                                                                            //
// Permission is hereby granted, free of charge, to any person obtaining a    //
// copy of this software and associated documentation files (the "Software"), //
// to deal in the Software without restriction, including without limitation  //
// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //
// and/or sell copies of the Software, and to permit persons to whom the      //
// Software is furnished to do so, subject to the following conditions:       //
//                                                                            //
// The above copyright notice and this permission notice shall be included in //
// all copies or substantial portions of the Software.                        //
//                                                                            //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    //
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    //
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        //
// DEALINGS IN THE SOFTWARE.                                                  //
//                                                                            //
//----------------------------------------------------------------------------//

#include "ozz/animation/runtime/track.h"

#include "ozz/base/io/archive.h"
#include "ozz/base/log.h"
#include "ozz/base/maths/math_archive.h"
#include "ozz/base/maths/math_ex.h"
#include "ozz/base/memory/allocator.h"

#include <cassert>

namespace ozz {
namespace animation {

namespace internal {

template <typename _ValueType>
Track<_ValueType>::Track() : name_(NULL) {}

template <typename _ValueType>
Track<_ValueType>::~Track() {
  Deallocate();
}

template <typename _ValueType>
void Track<_ValueType>::Allocate(size_t _keys_count, size_t _name_len) {
  assert(ratios_.size() == 0 && values_.size() == 0);

  // Distributes buffer memory while ensuring proper alignment (serves larger
  // alignment values first).
  OZZ_STATIC_ASSERT(OZZ_ALIGN_OF(_ValueType) >= OZZ_ALIGN_OF(float));
  OZZ_STATIC_ASSERT(OZZ_ALIGN_OF(float) >= OZZ_ALIGN_OF(uint8_t));

  // Compute overall size and allocate a single buffer for all the data.
  const size_t buffer_size = _keys_count * sizeof(_ValueType) +  // values
                             _keys_count * sizeof(float) +       // ratios
                             (_keys_count + 7) * sizeof(uint8_t) / 8 +  // steps
                             (_name_len > 0 ? _name_len + 1 : 0);
  char* buffer = reinterpret_cast<char*>(memory::default_allocator()->Allocate(
      buffer_size, OZZ_ALIGN_OF(_ValueType)));

  // Fix up pointers. Serves larger alignment values first.
  values_.begin = reinterpret_cast<_ValueType*>(buffer);
  assert(math::IsAligned(values_.begin, OZZ_ALIGN_OF(_ValueType)));
  buffer += _keys_count * sizeof(_ValueType);
  values_.end = reinterpret_cast<_ValueType*>(buffer);

  ratios_.begin = reinterpret_cast<float*>(buffer);
  assert(math::IsAligned(ratios_.begin, OZZ_ALIGN_OF(float)));
  buffer += _keys_count * sizeof(float);
  ratios_.end = reinterpret_cast<float*>(buffer);

  steps_.begin = reinterpret_cast<uint8_t*>(buffer);
  assert(math::IsAligned(steps_.begin, OZZ_ALIGN_OF(uint8_t)));
  buffer += (_keys_count + 7) * sizeof(uint8_t) / 8;
  steps_.end = reinterpret_cast<uint8_t*>(buffer);

  // Let name be NULL if track has no name. Allows to avoid allocating this
  // buffer in the constructor of empty animations.
  name_ = reinterpret_cast<char*>(_name_len > 0 ? buffer : NULL);
  assert(math::IsAligned(name_, OZZ_ALIGN_OF(char)));
}

template <typename _ValueType>
void Track<_ValueType>::Deallocate() {
  // Deallocate everything at once.
  memory::default_allocator()->Deallocate(values_.begin);

  values_.Clear();
  ratios_.Clear();
  steps_.Clear();
  name_ = NULL;
}

template <typename _ValueType>
size_t Track<_ValueType>::size() const {
  const size_t size =
      sizeof(*this) + values_.size() + ratios_.size() + steps_.size();
  return size;
}

template <typename _ValueType>
void Track<_ValueType>::Save(ozz::io::OArchive& _archive) const {
  uint32_t num_keys = static_cast<uint32_t>(ratios_.count());
  _archive << num_keys;

  const size_t name_len = name_ ? std::strlen(name_) : 0;
  _archive << static_cast<int32_t>(name_len);

  _archive << ozz::io::MakeArray(ratios_);
  _archive << ozz::io::MakeArray(values_);
  _archive << ozz::io::MakeArray(steps_);

  _archive << ozz::io::MakeArray(name_, name_len);
}

template <typename _ValueType>
void Track<_ValueType>::Load(ozz::io::IArchive& _archive, uint32_t _version) {
  // Destroy animation in case it was already used before.
  Deallocate();

  if (_version > 1) {
    log::Err() << "Unsupported Track version " << _version << "." << std::endl;
    return;
  }

  uint32_t num_keys;
  _archive >> num_keys;

  int32_t name_len;
  _archive >> name_len;

  Allocate(num_keys, name_len);

  _archive >> ozz::io::MakeArray(ratios_);
  _archive >> ozz::io::MakeArray(values_);
  _archive >> ozz::io::MakeArray(steps_);

  if (name_) {  // NULL name_ is supported.
    _archive >> ozz::io::MakeArray(name_, name_len);
    name_[name_len] = 0;
  }
}

// Explicitly instantiate supported tracks.
template class Track<float>;
template class Track<math::Float2>;
template class Track<math::Float3>;
template class Track<math::Float4>;
template class Track<math::Quaternion>;

}  // namespace internal
}  // namespace animation
}  // namespace ozz

// Including track_sampling_job.cc file.

//----------------------------------------------------------------------------//
//                                                                            //
// ozz-animation is hosted at http://github.com/guillaumeblanc/ozz-animation  //
// and distributed under the MIT License (MIT).                               //
//                                                                            //
// Copyright (c) 2019 Guillaume Blanc                                         //
//                                                                            //
// Permission is hereby granted, free of charge, to any person obtaining a    //
// copy of this software and associated documentation files (the "Software"), //
// to deal in the Software without restriction, including without limitation  //
// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //
// and/or sell copies of the Software, and to permit persons to whom the      //
// Software is furnished to do so, subject to the following conditions:       //
//                                                                            //
// The above copyright notice and this permission notice shall be included in //
// all copies or substantial portions of the Software.                        //
//                                                                            //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    //
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    //
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        //
// DEALINGS IN THE SOFTWARE.                                                  //
//                                                                            //
//----------------------------------------------------------------------------//

#include "ozz/animation/runtime/track_sampling_job.h"
#include "ozz/animation/runtime/track.h"
#include "ozz/base/maths/math_ex.h"

#include <algorithm>
#include <cassert>

namespace ozz {
namespace animation {
namespace internal {

template <typename _Track>
TrackSamplingJob<_Track>::TrackSamplingJob()
    : ratio(0.f), track(NULL), result(NULL) {}

template <typename _Track>
bool TrackSamplingJob<_Track>::Validate() const {
  bool success = true;
  success &= result != NULL;
  success &= track != NULL;
  return success;
}

template <typename _Track>
bool TrackSamplingJob<_Track>::Run() const {
  if (!Validate()) {
    return false;
  }

  // Clamps ratio in range [0,1].
  const float clamped_ratio = math::Clamp(0.f, ratio, 1.f);

  // Search keyframes to interpolate.
  const Range<const float> ratios = track->ratios();
  const Range<const ValueType> values = track->values();
  assert(ratios.count() == values.count() &&
         track->steps().count() * 8 >= values.count());

  // Default track returns identity.
  if (ratios.count() == 0) {
    *result = internal::TrackPolicy<ValueType>::identity();
    return true;
  }

  // Search for the first key frame with a ratio value greater than input ratio.
  // Our ratio is between this one and the previous one.
  const float* ptk1 = std::upper_bound(ratios.begin, ratios.end, clamped_ratio);

  // Deduce keys indices.
  const size_t id1 = ptk1 - ratios.begin;
  const size_t id0 = id1 - 1;

  const bool id0step = (track->steps()[id0 / 8] & (1 << (id0 & 7))) != 0;
  if (id0step || ptk1 == ratios.end) {
    *result = values[id0];
  } else {
    // Lerp relevant keys.
    const float tk0 = ratios[id0];
    const float tk1 = ratios[id1];
    assert(clamped_ratio >= tk0 && clamped_ratio < tk1 && tk0 != tk1);
    const float alpha = (clamped_ratio - tk0) / (tk1 - tk0);
    const ValueType& vk0 = values[id0];
    const ValueType& vk1 = values[id1];
    *result = internal::TrackPolicy<ValueType>::Lerp(vk0, vk1, alpha);
  }
  return true;
}

// Explicitly instantiate supported tracks.
template struct TrackSamplingJob<FloatTrack>;
template struct TrackSamplingJob<Float2Track>;
template struct TrackSamplingJob<Float3Track>;
template struct TrackSamplingJob<Float4Track>;
template struct TrackSamplingJob<QuaternionTrack>;
}  // namespace internal
}  // namespace animation
}  // namespace ozz

// Including track_triggering_job.cc file.

//----------------------------------------------------------------------------//
//                                                                            //
// ozz-animation is hosted at http://github.com/guillaumeblanc/ozz-animation  //
// and distributed under the MIT License (MIT).                               //
//                                                                            //
// Copyright (c) 2019 Guillaume Blanc                                         //
//                                                                            //
// Permission is hereby granted, free of charge, to any person obtaining a    //
// copy of this software and associated documentation files (the "Software"), //
// to deal in the Software without restriction, including without limitation  //
// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //
// and/or sell copies of the Software, and to permit persons to whom the      //
// Software is furnished to do so, subject to the following conditions:       //
//                                                                            //
// The above copyright notice and this permission notice shall be included in //
// all copies or substantial portions of the Software.                        //
//                                                                            //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,   //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL    //
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING    //
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER        //
// DEALINGS IN THE SOFTWARE.                                                  //
//                                                                            //
//----------------------------------------------------------------------------//

#include "ozz/animation/runtime/track_triggering_job.h"
#include "ozz/animation/runtime/track.h"

#include <algorithm>
#include <cassert>

namespace ozz {
namespace animation {

TrackTriggeringJob::TrackTriggeringJob()
    : from(0.f), to(0.f), threshold(0.f), track(NULL), iterator(NULL) {}

bool TrackTriggeringJob::Validate() const {
  bool valid = true;
  valid &= track != NULL;
  valid &= iterator != NULL;
  return valid;
}

bool TrackTriggeringJob::Run() const {
  if (!Validate()) {
    return false;
  }

  // Triggering can only happen in a valid range of ratio.
  if (from == to) {
    *iterator = end();
    return true;
  }

  *iterator = Iterator(this);

  return true;
}

namespace {
inline bool DetectEdge(ptrdiff_t _i0, ptrdiff_t _i1, bool _forward,
                       const TrackTriggeringJob& _job,
                       TrackTriggeringJob::Edge* _edge) {
  const Range<const float>& values = _job.track->values();

  const float vk0 = values[_i0];
  const float vk1 = values[_i1];

  bool detected = false;
  if (vk0 <= _job.threshold && vk1 > _job.threshold) {
    // Rising edge
    _edge->rising = _forward;
    detected = true;
  } else if (vk0 > _job.threshold && vk1 <= _job.threshold) {
    // Falling edge
    _edge->rising = !_forward;
    detected = true;
  }

  if (detected) {
    const Range<const float>& ratios = _job.track->ratios();
    const Range<const uint8_t>& steps = _job.track->steps();

    const bool step = (steps[_i0 / 8] & (1 << (_i0 & 7))) != 0;
    if (step) {
      _edge->ratio = ratios[_i1];
    } else {
      assert(vk0 != vk1);  // Won't divide by 0

      if (_i1 == 0) {
        _edge->ratio = 0.f;
      } else {
        // Finds where the curve crosses threshold value.
        // This is the lerp equation, where we know the result and look for
        // alpha, aka un-lerp.
        const float alpha = (_job.threshold - vk0) / (vk1 - vk0);

        // Remaps to keyframes actual times.
        const float tk0 = ratios[_i0];
        const float tk1 = ratios[_i1];
        _edge->ratio = math::Lerp(tk0, tk1, alpha);
      }
    }
  }
  return detected;
}
}  // namespace

TrackTriggeringJob::Iterator::Iterator(const TrackTriggeringJob* _job)
    : job_(_job) {
  // Outer loop initialization.
  outer_ = floorf(job_->from);

  // Search could start more closely to the "from" ratio, but it's not possible
  // to ensure that floating point precision will not lead to missing a key
  // (when from/to range is far from 0). This is less good in algorithmic
  // complexity, but for consistency of forward and backward triggering, it's
  // better to let iterator ++ implementation filter included and excluded
  // edges.
  inner_ = job_->from < job_->to ? 0 : _job->track->ratios().count() - 1;

  // Evaluates first edge.
  ++*this;
}

const TrackTriggeringJob::Iterator& TrackTriggeringJob::Iterator::operator++() {
  assert(*this != job_->end() && "Can't increment end iterator.");

  const Range<const float>& ratios = job_->track->ratios();
  const ptrdiff_t num_keys = ratios.count();

  if (job_->to > job_->from) {
    for (; outer_ < job_->to; outer_ += 1.f) {
      for (; inner_ < num_keys; ++inner_) {
        const ptrdiff_t i0 = inner_ == 0 ? num_keys - 1 : inner_ - 1;
        if (DetectEdge(i0, inner_, true, *job_, &edge_)) {
          edge_.ratio += outer_;  // Convert to global ratio space.
          if (edge_.ratio >= job_->from &&
              (edge_.ratio < job_->to || job_->to >= 1.f + outer_)) {
            ++inner_;
            return *this;  // Yield found edge.
          }
          // Won't find any further edge.
          if (ratios[inner_] + outer_ >= job_->to) {
            break;
          }
        }
      }
      inner_ = 0;  // Ready for next loop.
    }
  } else {
    for (; outer_ + 1.f > job_->to; outer_ -= 1.f) {
      for (; inner_ >= 0; --inner_) {
        const ptrdiff_t i0 = inner_ == 0 ? num_keys - 1 : inner_ - 1;
        if (DetectEdge(i0, inner_, false, *job_, &edge_)) {
          edge_.ratio += outer_;  // Convert to global ratio space.
          if (edge_.ratio >= job_->to &&
              (edge_.ratio < job_->from || job_->from >= 1.f + outer_)) {
            --inner_;
            return *this;  // Yield found edge.
          }
        }
        // Won't find any further edge.
        if (ratios[inner_] + outer_ <= job_->to) {
          break;
        }
      }
      inner_ = ratios.count() - 1;  // Ready for next loop.
    }
  }

  // Set iterator to end position.
  *this = job_->end();

  return *this;
}
}  // namespace animation
}  // namespace ozz

